{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/root/Desktop/dev/frontend/web/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/root/Desktop/dev/frontend/web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"C:/Users/root/Desktop/dev/frontend/web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"C:/Users/root/Desktop/dev/frontend/web/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\root\\\\Desktop\\\\dev\\\\frontend\\\\web\\\\src\\\\components\\\\hooks\\\\createWithApollo.js\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport App from \"next/app\";\nimport Head from \"next/head\";\nimport { ApolloProvider } from \"@apollo/client\"; // On the client, we store the Apollo Client in the following variable.\n// This prevents the client from reinitializing between page transitions.\n\nvar globalApolloClient = null;\n/**\r\n * Installs the Apollo Client on NextPageContext\r\n * or NextAppContext. Useful if you want to use apolloClient\r\n * inside getStaticProps, getStaticPaths or getServerSideProps\r\n * @param {NextPageContext | NextAppContext} ctx\r\n */\n\nexport var initOnContext = function initOnContext(ac, ctx) {\n  var inAppContext = Boolean(ctx.ctx); // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n\n  if (true) {\n    if (inAppContext) {\n      console.warn(\"Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n\" + \"Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n\");\n    }\n  } // Initialize ApolloClient if not already done\n\n\n  var apolloClient = ctx.apolloClient || initApolloClient(ac, ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx); // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.\n  // Otherwise, the component would have to call initApollo() again but this\n  // time without the context. Once that happens, the following code will make sure we send\n  // the prop as `null` to the browser.\n\n  apolloClient.toJSON = function () {\n    return null;\n  }; // Add apolloClient to NextPageContext & NextAppContext.\n  // This allows us to consume the apolloClient inside our\n  // custom `getInitialProps({ apolloClient })`.\n\n\n  ctx.apolloClient = apolloClient;\n\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\n/**\r\n * Always creates a new apollo client on the server\r\n * Creates or reuses apollo client in the browser.\r\n * @param  {NormalizedCacheObject} initialState\r\n * @param  {NextPageContext} ctx\r\n */\n\nvar initApolloClient = function initApolloClient(apolloClient, initialState, ctx) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(apolloClient(ctx), initialState, ctx);\n  } // Reuse client on the client-side\n\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(apolloClient(ctx), initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\n/**\r\n * Creates a withApollo HOC\r\n * that provides the apolloContext\r\n * to a next.js Page or AppTree.\r\n * @param  {Object} withApolloOptions\r\n * @param  {Boolean} [withApolloOptions.ssr=false]\r\n * @returns {(PageComponent: ReactNode) => ReactNode}\r\n */\n\n\nexport var createWithApollo = function createWithApollo(ac) {\n  return function () {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$ssr = _ref.ssr,\n        ssr = _ref$ssr === void 0 ? false : _ref$ssr;\n\n    return function (PageComponent) {\n      var WithApollo = function WithApollo(_ref2) {\n        var apolloClient = _ref2.apolloClient,\n            apolloState = _ref2.apolloState,\n            pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n        var client;\n\n        if (apolloClient) {\n          // Happens on: getDataFromTree & next.js ssr\n          client = apolloClient;\n        } else {\n          // Happens on: next.js csr\n          client = initApolloClient(ac, apolloState, undefined);\n        }\n\n        return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n          client: client,\n          children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n            forcedTheme: PageComponent.theme || undefined,\n            children: /*#__PURE__*/_jsxDEV(PageComponent, _objectSpread({}, pageProps), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 13\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 11\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }, _this);\n      }; // Set the correct displayName in development\n\n\n      if (true) {\n        var displayName = PageComponent.displayName || PageComponent.name || \"Component\";\n        WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n      }\n\n      if (ssr || PageComponent.getInitialProps) {\n        WithApollo.getInitialProps = /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n            var inAppContext, _initOnContext, apolloClient, pageProps, AppTree, _yield$import, getDataFromTree, props;\n\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    inAppContext = Boolean(ctx.ctx);\n                    _initOnContext = initOnContext(ac, ctx), apolloClient = _initOnContext.apolloClient; // Run wrapped getInitialProps methods\n\n                    pageProps = {};\n\n                    if (!PageComponent.getInitialProps) {\n                      _context.next = 9;\n                      break;\n                    }\n\n                    _context.next = 6;\n                    return PageComponent.getInitialProps(ctx);\n\n                  case 6:\n                    pageProps = _context.sent;\n                    _context.next = 13;\n                    break;\n\n                  case 9:\n                    if (!inAppContext) {\n                      _context.next = 13;\n                      break;\n                    }\n\n                    _context.next = 12;\n                    return App.getInitialProps(ctx);\n\n                  case 12:\n                    pageProps = _context.sent;\n\n                  case 13:\n                    if (!false) {\n                      _context.next = 32;\n                      break;\n                    }\n\n                    AppTree = ctx.AppTree; // When redirecting, the response is finished.\n                    // No point in continuing to render\n\n                    if (!(ctx.res && ctx.res.finished)) {\n                      _context.next = 17;\n                      break;\n                    }\n\n                    return _context.abrupt(\"return\", pageProps);\n\n                  case 17:\n                    if (!(ssr && AppTree)) {\n                      _context.next = 32;\n                      break;\n                    }\n\n                    _context.prev = 18;\n                    _context.next = 21;\n                    return import(\"@apollo/client/react/ssr\");\n\n                  case 21:\n                    _yield$import = _context.sent;\n                    getDataFromTree = _yield$import.getDataFromTree;\n\n                    if (inAppContext) {\n                      props = _objectSpread(_objectSpread({}, pageProps), {}, {\n                        apolloClient: apolloClient\n                      });\n                    } else {\n                      props = {\n                        pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                          apolloClient: apolloClient\n                        })\n                      };\n                    } // Take the Next.js AppTree, determine which queries are needed to render,\n                    // and fetch them. This method can be pretty slow since it renders\n                    // your entire AppTree once for every query. Check out apollo fragments\n                    // if you want to reduce the number of rerenders.\n                    // https://www.apollographql.com/docs/react/data/fragments/\n\n\n                    _context.next = 26;\n                    return getDataFromTree( /*#__PURE__*/_jsxDEV(AppTree, _objectSpread({}, props), void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 158,\n                      columnNumber: 37\n                    }, _this));\n\n                  case 26:\n                    _context.next = 31;\n                    break;\n\n                  case 28:\n                    _context.prev = 28;\n                    _context.t0 = _context[\"catch\"](18);\n                    // Prevent Apollo Client GraphQL errors from crashing SSR.\n                    // Handle them in components via the data.error prop:\n                    // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                    console.error(\"Error while running `getDataFromTree`\", _context.t0);\n\n                  case 31:\n                    // getDataFromTree does not call componentWillUnmount\n                    // head side effect therefore need to be cleared manually\n                    Head.rewind();\n\n                  case 32:\n                    return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, pageProps), {}, {\n                      // Extract query data from the Apollo store\n                      apolloState: apolloClient.cache.extract(),\n                      // Provide the client for ssr. As soon as this payload\n                      // gets JSON.stringified it will remove itself.\n                      apolloClient: ctx.apolloClient\n                    }));\n\n                  case 33:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[18, 28]]);\n          }));\n\n          return function (_x) {\n            return _ref3.apply(this, arguments);\n          };\n        }();\n      }\n\n      return WithApollo;\n    };\n  };\n};\n\nfunction createApolloClient(apolloClient, initialState, ctx) {\n  // The `ctx` (NextPageContext) will only be present on the server.\n  // use it to extract auth headers (ctx.req) or similar.\n  apolloClient.ssrMode = Boolean(ctx);\n  apolloClient.cache.restore(initialState);\n  return apolloClient;\n}","map":{"version":3,"sources":["C:/Users/root/Desktop/dev/frontend/web/src/components/hooks/createWithApollo.js"],"names":["React","App","Head","ApolloProvider","globalApolloClient","initOnContext","ac","ctx","inAppContext","Boolean","console","warn","apolloClient","initApolloClient","apolloState","toJSON","initialState","createApolloClient","createWithApollo","ssr","PageComponent","WithApollo","pageProps","client","undefined","theme","displayName","name","getInitialProps","AppTree","res","finished","getDataFromTree","props","error","rewind","cache","extract","ssrMode","restore"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport App from \"next/app\";\r\nimport Head from \"next/head\";\r\nimport { ApolloProvider } from \"@apollo/client\";\r\n\r\n// On the client, we store the Apollo Client in the following variable.\r\n// This prevents the client from reinitializing between page transitions.\r\nlet globalApolloClient = null;\r\n\r\n/**\r\n * Installs the Apollo Client on NextPageContext\r\n * or NextAppContext. Useful if you want to use apolloClient\r\n * inside getStaticProps, getStaticPaths or getServerSideProps\r\n * @param {NextPageContext | NextAppContext} ctx\r\n */\r\nexport const initOnContext = (ac, ctx) => {\r\n  const inAppContext = Boolean(ctx.ctx);\r\n\r\n  // We consider installing `withApollo({ ssr: true })` on global App level\r\n  // as antipattern since it disables project wide Automatic Static Optimization.\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    if (inAppContext) {\r\n      console.warn(\r\n        \"Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n\" +\r\n          \"Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n\"\r\n      );\r\n    }\r\n  }\r\n\r\n  // Initialize ApolloClient if not already done\r\n  const apolloClient =\r\n    ctx.apolloClient ||\r\n    initApolloClient(ac, ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\r\n\r\n  // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.\r\n  // Otherwise, the component would have to call initApollo() again but this\r\n  // time without the context. Once that happens, the following code will make sure we send\r\n  // the prop as `null` to the browser.\r\n  apolloClient.toJSON = () => null;\r\n\r\n  // Add apolloClient to NextPageContext & NextAppContext.\r\n  // This allows us to consume the apolloClient inside our\r\n  // custom `getInitialProps({ apolloClient })`.\r\n  ctx.apolloClient = apolloClient;\r\n  if (inAppContext) {\r\n    ctx.ctx.apolloClient = apolloClient;\r\n  }\r\n\r\n  return ctx;\r\n};\r\n\r\n/**\r\n * Always creates a new apollo client on the server\r\n * Creates or reuses apollo client in the browser.\r\n * @param  {NormalizedCacheObject} initialState\r\n * @param  {NextPageContext} ctx\r\n */\r\nconst initApolloClient = (apolloClient, initialState, ctx) => {\r\n  // Make sure to create a new client for every server-side request so that data\r\n  // isn't shared between connections (which would be bad)\r\n  if (typeof window === \"undefined\") {\r\n    return createApolloClient(apolloClient(ctx), initialState, ctx);\r\n  }\r\n\r\n  // Reuse client on the client-side\r\n  if (!globalApolloClient) {\r\n    globalApolloClient = createApolloClient(\r\n      apolloClient(ctx),\r\n      initialState,\r\n      ctx\r\n    );\r\n  }\r\n\r\n  return globalApolloClient;\r\n};\r\n\r\n/**\r\n * Creates a withApollo HOC\r\n * that provides the apolloContext\r\n * to a next.js Page or AppTree.\r\n * @param  {Object} withApolloOptions\r\n * @param  {Boolean} [withApolloOptions.ssr=false]\r\n * @returns {(PageComponent: ReactNode) => ReactNode}\r\n */\r\nexport const createWithApollo = (ac) => {\r\n  return ({ ssr = false } = {}) => (PageComponent) => {\r\n    const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\r\n      let client;\r\n      if (apolloClient) {\r\n        // Happens on: getDataFromTree & next.js ssr\r\n        client = apolloClient;\r\n      } else {\r\n        // Happens on: next.js csr\r\n        client = initApolloClient(ac, apolloState, undefined);\r\n      }\r\n\r\n      return (\r\n        <ApolloProvider client={client}>\r\n          <ThemeProvider forcedTheme={PageComponent.theme || undefined}>\r\n            <PageComponent {...pageProps} />\r\n          </ThemeProvider>\r\n        </ApolloProvider>\r\n      );\r\n    };\r\n\r\n    // Set the correct displayName in development\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n      const displayName =\r\n        PageComponent.displayName || PageComponent.name || \"Component\";\r\n      WithApollo.displayName = `withApollo(${displayName})`;\r\n    }\r\n\r\n    if (ssr || PageComponent.getInitialProps) {\r\n      WithApollo.getInitialProps = async (ctx) => {\r\n        const inAppContext = Boolean(ctx.ctx);\r\n        const { apolloClient } = initOnContext(ac, ctx);\r\n\r\n        // Run wrapped getInitialProps methods\r\n        let pageProps = {};\r\n        if (PageComponent.getInitialProps) {\r\n          pageProps = await PageComponent.getInitialProps(ctx);\r\n        } else if (inAppContext) {\r\n          pageProps = await App.getInitialProps(ctx);\r\n        }\r\n\r\n        // Only on the server:\r\n        if (typeof window === \"undefined\") {\r\n          const { AppTree } = ctx;\r\n          // When redirecting, the response is finished.\r\n          // No point in continuing to render\r\n          if (ctx.res && ctx.res.finished) {\r\n            return pageProps;\r\n          }\r\n\r\n          // Only if dataFromTree is enabled\r\n          if (ssr && AppTree) {\r\n            try {\r\n              // Import `@apollo/react-ssr` dynamically.\r\n              // We don't want to have this in our client bundle.\r\n              const { getDataFromTree } = await import(\r\n                \"@apollo/client/react/ssr\"\r\n              );\r\n\r\n              // Since AppComponents and PageComponents have different context types\r\n              // we need to modify their props a little.\r\n              let props;\r\n              if (inAppContext) {\r\n                props = { ...pageProps, apolloClient };\r\n              } else {\r\n                props = { pageProps: { ...pageProps, apolloClient } };\r\n              }\r\n\r\n              // Take the Next.js AppTree, determine which queries are needed to render,\r\n              // and fetch them. This method can be pretty slow since it renders\r\n              // your entire AppTree once for every query. Check out apollo fragments\r\n              // if you want to reduce the number of rerenders.\r\n              // https://www.apollographql.com/docs/react/data/fragments/\r\n              await getDataFromTree(<AppTree {...props} />);\r\n            } catch (error) {\r\n              // Prevent Apollo Client GraphQL errors from crashing SSR.\r\n              // Handle them in components via the data.error prop:\r\n              // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\r\n              console.error(\"Error while running `getDataFromTree`\", error);\r\n            }\r\n\r\n            // getDataFromTree does not call componentWillUnmount\r\n            // head side effect therefore need to be cleared manually\r\n            Head.rewind();\r\n          }\r\n        }\r\n\r\n        return {\r\n          ...pageProps,\r\n          // Extract query data from the Apollo store\r\n          apolloState: apolloClient.cache.extract(),\r\n          // Provide the client for ssr. As soon as this payload\r\n          // gets JSON.stringified it will remove itself.\r\n          apolloClient: ctx.apolloClient,\r\n        };\r\n      };\r\n    }\r\n\r\n    return WithApollo;\r\n  };\r\n};\r\n\r\nfunction createApolloClient(apolloClient, initialState, ctx) {\r\n  // The `ctx` (NextPageContext) will only be present on the server.\r\n  // use it to extract auth headers (ctx.req) or similar.\r\n  apolloClient.ssrMode = Boolean(ctx);\r\n  apolloClient.cache.restore(initialState);\r\n\r\n  return apolloClient;\r\n}"]},"metadata":{},"sourceType":"module"}