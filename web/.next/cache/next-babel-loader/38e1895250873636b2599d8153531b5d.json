{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\root\\\\Desktop\\\\dev\\\\api2.pebblo.org\\\\frontend\\\\src\\\\pages\\\\[username].tsx\";\nimport { getUser } from \"../../graphql/queries/user\";\nimport { getApolloClient, withApollo } from \"../components/hooks/withApolloHook\";\n\nconst username = ({\n  props\n}) => {\n  var _props$data, _props$data3;\n\n  console.log(props);\n\n  if (props.data.loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 16\n    }, this);\n  }\n\n  if ((_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.error) {\n    var _props$data2;\n\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: (_props$data2 = props.data) === null || _props$data2 === void 0 ? void 0 : _props$data2.error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (!((_props$data3 = props.data) === null || _props$data3 === void 0 ? void 0 : _props$data3.user)) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \":(\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 16\n    }, this);\n  } // const router = useRouter();\n  // const { data, error, loading } = useQuery(getUser, {\n  //     variables: { username: 'test' }\n  // });\n  // if(loading) {\n  //     return <p>Loading...</p>\n  // }\n  // if(error) {\n  //     return <div>{error.message}</div>\n  // }\n  // if(!data?.user) {\n  //     <p>sad times man</p>\n  // }\n  // return (\n  //     <p>{JSON.stringify(data.user)}</p>\n  // )\n  // if(error) {\n  //     <p>{error.message}</p>\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"lel\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\nexport const getServerSideProps = async context => {\n  const client = getApolloClient();\n  const props = await client.query({\n    query: getUser,\n    variables: {\n      username: context.params.username\n    }\n  });\n  return {\n    props: {\n      apolloStaticCache: client.cache.extract(),\n      props\n    }\n  };\n};\nexport default withApollo(username);","map":{"version":3,"sources":["C:/Users/root/Desktop/dev/api2.pebblo.org/frontend/src/pages/[username].tsx"],"names":["getUser","getApolloClient","withApollo","username","props","console","log","data","loading","error","message","user","getServerSideProps","context","client","query","variables","params","apolloStaticCache","cache","extract"],"mappings":";;AACA,SAASA,OAAT,QAAwB,4BAAxB;AACA,SAASC,eAAT,EAA0BC,UAA1B,QAA4C,oCAA5C;;AAIA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAAA;;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;;AACA,MAAGA,KAAK,CAACG,IAAN,CAAWC,OAAd,EAAuB;AACnB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,qBAAGJ,KAAK,CAACG,IAAT,gDAAG,YAAYE,KAAf,EAAsB;AAAA;;AAClB,wBAAO;AAAA,gCAAIL,KAAK,CAACG,IAAV,iDAAI,aAAYE,KAAZ,CAAkBC;AAAtB;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,MAAG,kBAACN,KAAK,CAACG,IAAP,iDAAC,aAAYI,IAAb,CAAH,EAAsB;AAClB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAZ2B,CAa5B;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CA1CD;;AA4CA,OAAO,MAAMC,kBAAsC,GAAG,MAAOC,OAAP,IAAmB;AACrE,QAAMC,MAAM,GAAGb,eAAe,EAA9B;AACA,QAAMG,KAAK,GAAG,MAAMU,MAAM,CAACC,KAAP,CAAa;AAC/BA,IAAAA,KAAK,EAAEf,OADwB;AAE/BgB,IAAAA,SAAS,EAAE;AAAEb,MAAAA,QAAQ,EAAEU,OAAO,CAACI,MAAR,CAAed;AAA3B;AAFoB,GAAb,CAApB;AAIA,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLc,MAAAA,iBAAiB,EAAEJ,MAAM,CAACK,KAAP,CAAaC,OAAb,EADd;AAELhB,MAAAA;AAFK;AADF,GAAP;AAMH,CAZM;AAcP,eAAeF,UAAU,CAACC,QAAD,CAAzB","sourcesContent":["import { useQuery } from \"@apollo/client\"\r\nimport { getUser } from \"../../graphql/queries/user\";\r\nimport { getApolloClient, withApollo } from \"../components/hooks/withApolloHook\"\r\nimport { useRouter } from 'next/router';\r\nimport { GetServerSideProps } from \"next\";\r\n\r\nconst username = ({ props }) => {\r\n    console.log(props)\r\n    if(props.data.loading) {\r\n        return <p>Loading...</p>\r\n    }\r\n   \r\n    if(props.data?.error) {\r\n        return <p>{props.data?.error.message}</p>\r\n    }\r\n\r\n    if(!props.data?.user) {\r\n        return <p>:(</p>\r\n    }\r\n    // const router = useRouter();\r\n    // const { data, error, loading } = useQuery(getUser, {\r\n    //     variables: { username: 'test' }\r\n    // });\r\n\r\n    // if(loading) {\r\n    //     return <p>Loading...</p>\r\n    // }\r\n\r\n    // if(error) {\r\n    //     return <div>{error.message}</div>\r\n    // }\r\n\r\n\r\n    // if(!data?.user) {\r\n    //     <p>sad times man</p>\r\n    // }\r\n\r\n    // return (\r\n    //     <p>{JSON.stringify(data.user)}</p>\r\n    // )\r\n\r\n    // if(error) {\r\n    //     <p>{error.message}</p>\r\n    // }\r\n\r\n    return (\r\n        <p>lel</p>\r\n    )\r\n}\r\n\r\nexport const getServerSideProps: GetServerSideProps = async (context) => {\r\n    const client = getApolloClient();\r\n    const props = await client.query({\r\n      query: getUser,\r\n      variables: { username: context.params.username as string }\r\n    });\r\n    return {\r\n      props: {\r\n        apolloStaticCache: client.cache.extract(),\r\n        props\r\n      }\r\n    };\r\n}\r\n\r\nexport default withApollo(username);\r\n"]},"metadata":{},"sourceType":"module"}