{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\root\\\\Desktop\\\\dev\\\\api2.pebblo.org\\\\frontend\\\\src\\\\pages\\\\[username].tsx\";\nimport { getUser } from \"../../graphql/queries/user\";\nimport { getApolloClient, withApollo } from \"../components/hooks/withApolloHook\";\n\nconst username = ({\n  data\n}) => {\n  // const router = useRouter();\n  // const { data, error, loading } = useQuery(getUser, {\n  //     variables: { username: 'test' }\n  // });\n  // if(loading) {\n  //     return <p>Loading...</p>\n  // }\n  // if(error) {\n  //     return <div>{error.message}</div>\n  // }\n  // if(!data?.user) {\n  //     <p>sad times man</p>\n  // }\n  // return (\n  //     <p>{JSON.stringify(data.user)}</p>\n  // )\n  if (error) {\n    /*#__PURE__*/\n    _jsxDEV(\"p\", {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this);\n  }\n\n  {\n    console.log(data);\n  }\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"lel\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\nexport const getServerSideProps = async context => {\n  const client = await getApolloClient();\n  const {\n    data,\n    error,\n    loading\n  } = await client.query({\n    query: getUser,\n    variables: {\n      username: context.params.username\n    }\n  });\n  return {\n    props: {\n      apolloStaticCache: client.cache.extract(),\n      data,\n      error\n    }\n  };\n};\nexport default withApollo(username);","map":{"version":3,"sources":["C:/Users/root/Desktop/dev/api2.pebblo.org/frontend/src/pages/[username].tsx"],"names":["getUser","getApolloClient","withApollo","username","data","error","message","console","log","getServerSideProps","context","client","loading","query","variables","params","props","apolloStaticCache","cache","extract"],"mappings":";;AACA,SAASA,OAAT,QAAwB,4BAAxB;AACA,SAASC,eAAT,EAA0BC,UAA1B,QAA4C,oCAA5C;;AAIA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC3B;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA,MAAGC,KAAH,EAAU;AACN;AAAA;AAAA,gBAAIA,KAAK,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA;AACH;;AAED;AAACC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AAAkB;AAEnB,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAhCD;;AAkCA,OAAO,MAAMK,kBAAsC,GAAG,MAAOC,OAAP,IAAmB;AACrE,QAAMC,MAAM,GAAG,MAAMV,eAAe,EAApC;AACA,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeO,IAAAA;AAAf,MAA2B,MAAMD,MAAM,CAACE,KAAP,CAAa;AAClDA,IAAAA,KAAK,EAAEb,OAD2C;AAElDc,IAAAA,SAAS,EAAE;AAAEX,MAAAA,QAAQ,EAAEO,OAAO,CAACK,MAAR,CAAeZ;AAA3B;AAFuC,GAAb,CAAvC;AAIA,SAAO;AACLa,IAAAA,KAAK,EAAE;AACLC,MAAAA,iBAAiB,EAAEN,MAAM,CAACO,KAAP,CAAaC,OAAb,EADd;AAELf,MAAAA,IAFK;AAGLC,MAAAA;AAHK;AADF,GAAP;AAOH,CAbM;AAeP,eAAeH,UAAU,CAACC,QAAD,CAAzB","sourcesContent":["import { useQuery } from \"@apollo/client\"\r\nimport { getUser } from \"../../graphql/queries/user\";\r\nimport { getApolloClient, withApollo } from \"../components/hooks/withApolloHook\"\r\nimport { useRouter } from 'next/router';\r\nimport { GetServerSideProps } from \"next\";\r\n\r\nconst username = ({ data }) => {\r\n    // const router = useRouter();\r\n    // const { data, error, loading } = useQuery(getUser, {\r\n    //     variables: { username: 'test' }\r\n    // });\r\n\r\n    // if(loading) {\r\n    //     return <p>Loading...</p>\r\n    // }\r\n\r\n    // if(error) {\r\n    //     return <div>{error.message}</div>\r\n    // }\r\n\r\n\r\n    // if(!data?.user) {\r\n    //     <p>sad times man</p>\r\n    // }\r\n\r\n    // return (\r\n    //     <p>{JSON.stringify(data.user)}</p>\r\n    // )\r\n\r\n    if(error) {\r\n        <p>{error.message}</p>\r\n    }\r\n\r\n    {console.log(data)}\r\n\r\n    return (\r\n        <p>lel</p>\r\n    )\r\n}\r\n\r\nexport const getServerSideProps: GetServerSideProps = async (context) => {\r\n    const client = await getApolloClient();\r\n    const { data, error, loading } = await client.query({\r\n      query: getUser,\r\n      variables: { username: context.params.username as string }\r\n    });\r\n    return {\r\n      props: {\r\n        apolloStaticCache: client.cache.extract(),\r\n        data,\r\n        error\r\n      }\r\n    };\r\n}\r\n\r\nexport default withApollo(username);\r\n"]},"metadata":{},"sourceType":"module"}