{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\nimport * as React from 'react';\nimport { ApolloProvider } from '@apollo/client'; // const CLIENT_URL = process.env.NODE_ENV !== 'production' ? 'https://pebblo.org/api' : 'http://localhost:4000/api';\n\nconst CLIENT_URL = 'http://localhost:4000/api';\nconst endpoint = `${CLIENT_URL}/query`;\nconst link = new HttpLink({\n  uri: endpoint,\n  credentials: \"include\"\n});\nconst isBrowser = process.browser;\nexport const getApolloClient = ctx => {\n  var _ctx$req;\n\n  return new ApolloClient({\n    headers: {\n      cookie: (true ? ctx === null || ctx === void 0 ? void 0 : (_ctx$req = ctx.req) === null || _ctx$req === void 0 ? void 0 : _ctx$req.headers.cookie : undefined) || \"\"\n    },\n    credentials: 'include',\n    link,\n    cache: new InMemoryCache()\n  });\n};\nexport function withApollo(PageComponent) {\n  // eslint-disable-next-line\n  const WithApollo = (_ref) => {\n    let {\n      apolloStaticCache\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloStaticCache\"]);\n\n    // apolloStaticCache prop gets set in getStaticProps on page views\n    const client = getApolloClient(apolloStaticCache);\n    return /*#__PURE__*/_jsx(ApolloProvider, {\n      client: client,\n      children: /*#__PURE__*/_jsx(PageComponent, _objectSpread({}, pageProps))\n    });\n  }; // Set the correct displayName in development\n\n\n  if (false) {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  return WithApollo;\n}","map":null,"metadata":{},"sourceType":"module"}