{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getUser } from \"../../graphql/queries/user\";\nimport { getApolloClient, withApollo } from \"../components/hooks/withApolloHook\";\nimport Nav from '../components/Nav';\n\nconst username = ({\n  data: {\n    data,\n    errors,\n    loading\n  }\n}) => {\n  const styles = {\n    margin: \"auto\",\n    width: \"50%\",\n    padding: \"10px\"\n  };\n\n  if (!data || !data.user) {\n    return /*#__PURE__*/_jsx(\"p\", {\n      children: \":(\"\n    });\n  }\n\n  if (loading) {\n    return /*#__PURE__*/_jsx(\"p\", {\n      children: \"Loading...\"\n    });\n  }\n\n  if (errors) return /*#__PURE__*/_jsx(\"p\", {\n    children: errors.message\n  });\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Nav, {}), /*#__PURE__*/_jsx(\"p\", {\n      style: styles,\n      children: data.user.username\n    })]\n  });\n};\n\nexport const getServerSideProps = async context => {\n  const client = getApolloClient();\n  const data = await client.query({\n    query: getUser,\n    variables: {\n      username: context.params.username\n    }\n  });\n  return {\n    props: {\n      apolloStaticCache: client.cache.extract(),\n      data\n    }\n  };\n};\nexport default withApollo(username);","map":null,"metadata":{},"sourceType":"module"}