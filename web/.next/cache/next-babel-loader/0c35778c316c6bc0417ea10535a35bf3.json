{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/root/Desktop/dev/frontend/web/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/root/Desktop/dev/frontend/web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"C:/Users/root/Desktop/dev/frontend/web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"C:/Users/root/Desktop/dev/frontend/web/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport App from \"next/app\";\nimport Head from \"next/head\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { ThemeProvider } from \"next-themes\"; // On the client, we store the Apollo Client in the following variable.\n// This prevents the client from reinitializing between page transitions.\n\nvar globalApolloClient = null;\n/**\r\n * Installs the Apollo Client on NextPageContext\r\n * or NextAppContext. Useful if you want to use apolloClient\r\n * inside getStaticProps, getStaticPaths or getServerSideProps\r\n * @param {NextPageContext | NextAppContext} ctx\r\n */\n\nexport var initOnContext = function initOnContext(ac, ctx) {\n  var inAppContext = Boolean(ctx.ctx); // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n\n  if (false) {\n    if (inAppContext) {\n      console.warn(\"Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n\" + \"Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n\");\n    }\n  } // Initialize ApolloClient if not already done\n\n\n  var apolloClient = ctx.apolloClient || initApolloClient(ac, ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx); // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.\n  // Otherwise, the component would have to call initApollo() again but this\n  // time without the context. Once that happens, the following code will make sure we send\n  // the prop as `null` to the browser.\n\n  apolloClient.toJSON = function () {\n    return null;\n  }; // Add apolloClient to NextPageContext & NextAppContext.\n  // This allows us to consume the apolloClient inside our\n  // custom `getInitialProps({ apolloClient })`.\n\n\n  ctx.apolloClient = apolloClient;\n\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\n/**\r\n * Always creates a new apollo client on the server\r\n * Creates or reuses apollo client in the browser.\r\n * @param  {NormalizedCacheObject} initialState\r\n * @param  {NextPageContext} ctx\r\n */\n\nvar initApolloClient = function initApolloClient(apolloClient, initialState, ctx) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(apolloClient(ctx), initialState, ctx);\n  } // Reuse client on the client-side\n\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(apolloClient(ctx), initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\n/**\r\n * Creates a withApollo HOC\r\n * that provides the apolloContext\r\n * to a next.js Page or AppTree.\r\n * @param  {Object} withApolloOptions\r\n * @param  {Boolean} [withApolloOptions.ssr=false]\r\n * @returns {(PageComponent: ReactNode) => ReactNode}\r\n */\n\n\nexport var createWithApollo = function createWithApollo(ac) {\n  return function () {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$ssr = _ref.ssr,\n        ssr = _ref$ssr === void 0 ? false : _ref$ssr;\n\n    return function (PageComponent) {\n      var WithApollo = function WithApollo(_ref2) {\n        var apolloClient = _ref2.apolloClient,\n            apolloState = _ref2.apolloState,\n            pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n        var client;\n\n        if (apolloClient) {\n          // Happens on: getDataFromTree & next.js ssr\n          client = apolloClient;\n        } else {\n          // Happens on: next.js csr\n          client = initApolloClient(ac, apolloState, undefined);\n        }\n\n        return /*#__PURE__*/_jsx(ApolloProvider, {\n          client: client,\n          children: /*#__PURE__*/_jsx(ThemeProvider, {\n            forcedTheme: PageComponent.theme || undefined,\n            children: /*#__PURE__*/_jsx(PageComponent, _objectSpread({}, pageProps))\n          })\n        });\n      }; // Set the correct displayName in development\n\n\n      if (false) {\n        var displayName = PageComponent.displayName || PageComponent.name || \"Component\";\n        WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n      }\n\n      if (ssr || PageComponent.getInitialProps) {\n        WithApollo.getInitialProps = /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n            var inAppContext, _initOnContext, apolloClient, pageProps, AppTree, _yield$import, getDataFromTree, props;\n\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    inAppContext = Boolean(ctx.ctx);\n                    _initOnContext = initOnContext(ac, ctx), apolloClient = _initOnContext.apolloClient; // Run wrapped getInitialProps methods\n\n                    pageProps = {};\n\n                    if (!PageComponent.getInitialProps) {\n                      _context.next = 9;\n                      break;\n                    }\n\n                    _context.next = 6;\n                    return PageComponent.getInitialProps(ctx);\n\n                  case 6:\n                    pageProps = _context.sent;\n                    _context.next = 13;\n                    break;\n\n                  case 9:\n                    if (!inAppContext) {\n                      _context.next = 13;\n                      break;\n                    }\n\n                    _context.next = 12;\n                    return App.getInitialProps(ctx);\n\n                  case 12:\n                    pageProps = _context.sent;\n\n                  case 13:\n                    if (!false) {\n                      _context.next = 32;\n                      break;\n                    }\n\n                    AppTree = ctx.AppTree; // When redirecting, the response is finished.\n                    // No point in continuing to render\n\n                    if (!(ctx.res && ctx.res.finished)) {\n                      _context.next = 17;\n                      break;\n                    }\n\n                    return _context.abrupt(\"return\", pageProps);\n\n                  case 17:\n                    if (!(ssr && AppTree)) {\n                      _context.next = 32;\n                      break;\n                    }\n\n                    _context.prev = 18;\n                    _context.next = 21;\n                    return import(\"@apollo/client/react/ssr\");\n\n                  case 21:\n                    _yield$import = _context.sent;\n                    getDataFromTree = _yield$import.getDataFromTree;\n\n                    if (inAppContext) {\n                      props = _objectSpread(_objectSpread({}, pageProps), {}, {\n                        apolloClient: apolloClient\n                      });\n                    } else {\n                      props = {\n                        pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                          apolloClient: apolloClient\n                        })\n                      };\n                    } // Take the Next.js AppTree, determine which queries are needed to render,\n                    // and fetch them. This method can be pretty slow since it renders\n                    // your entire AppTree once for every query. Check out apollo fragments\n                    // if you want to reduce the number of rerenders.\n                    // https://www.apollographql.com/docs/react/data/fragments/\n\n\n                    _context.next = 26;\n                    return getDataFromTree( /*#__PURE__*/_jsx(AppTree, _objectSpread({}, props)));\n\n                  case 26:\n                    _context.next = 31;\n                    break;\n\n                  case 28:\n                    _context.prev = 28;\n                    _context.t0 = _context[\"catch\"](18);\n                    // Prevent Apollo Client GraphQL errors from crashing SSR.\n                    // Handle them in components via the data.error prop:\n                    // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                    console.error(\"Error while running `getDataFromTree`\", _context.t0);\n\n                  case 31:\n                    // getDataFromTree does not call componentWillUnmount\n                    // head side effect therefore need to be cleared manually\n                    Head.rewind();\n\n                  case 32:\n                    return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, pageProps), {}, {\n                      // Extract query data from the Apollo store\n                      apolloState: apolloClient.cache.extract(),\n                      // Provide the client for ssr. As soon as this payload\n                      // gets JSON.stringified it will remove itself.\n                      apolloClient: ctx.apolloClient\n                    }));\n\n                  case 33:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[18, 28]]);\n          }));\n\n          return function (_x) {\n            return _ref3.apply(this, arguments);\n          };\n        }();\n      }\n\n      return WithApollo;\n    };\n  };\n};\n\nfunction createApolloClient(apolloClient, initialState, ctx) {\n  // The `ctx` (NextPageContext) will only be present on the server.\n  // use it to extract auth headers (ctx.req) or similar.\n  apolloClient.ssrMode = Boolean(ctx);\n  apolloClient.cache.restore(initialState);\n  return apolloClient;\n}","map":null,"metadata":{},"sourceType":"module"}