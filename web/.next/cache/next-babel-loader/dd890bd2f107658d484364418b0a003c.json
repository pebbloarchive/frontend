{"ast":null,"code":"import _taggedTemplateLiteral from \"C:/Users/root/Desktop/dev/frontend/web/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$(),\n    _s12 = $RefreshSig$(),\n    _s13 = $RefreshSig$(),\n    _s14 = $RefreshSig$(),\n    _s15 = $RefreshSig$(),\n    _s16 = $RefreshSig$(),\n    _s17 = $RefreshSig$(),\n    _s18 = $RefreshSig$(),\n    _s19 = $RefreshSig$(),\n    _s20 = $RefreshSig$(),\n    _s21 = $RefreshSig$();\n\nfunction _templateObject21() {\n  var data = _taggedTemplateLiteral([\"\\n    query User($username: String!) {\\n  user(username: $username) {\\n    errors {\\n      field\\n      message\\n    }\\n    user {\\n      id\\n      username\\n      name\\n      avatar\\n      description\\n      followers\\n      following\\n      verified\\n      permissions\\n      createdAt\\n      updatedAt\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject21 = function _templateObject21() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject20() {\n  var data = _taggedTemplateLiteral([\"\\n    query Posts($limit: Int!, $cursor: String) {\\n  posts(cursor: $cursor, limit: $limit) {\\n    hasMore\\n    posts {\\n      ...PostSnippet\\n    }\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject20 = function _templateObject20() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject19() {\n  var data = _taggedTemplateLiteral([\"\\n    query Post($id: String!) {\\n  post(id: $id) {\\n    ...PostSnippet\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject19 = function _templateObject19() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject18() {\n  var data = _taggedTemplateLiteral([\"\\n    query Me {\\n  me {\\n    ...AnyUser\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject18 = function _templateObject18() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject17() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation UpdatePost($id: String!, $content: String!) {\\n  updatePost(id: $id, content: $content) {\\n    ...AnyPostResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject17 = function _templateObject17() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject16() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation UpdateAccount($private: Boolean!, $avatar: String!, $description: String!, $location: String!, $email: String!, $name: String!, $username: String!) {\\n  updateAccount(\\n    private: $private\\n    avatar: $avatar\\n    description: $description\\n    location: $location\\n    email: $email\\n    name: $name\\n    username: $username\\n  ) {\\n    ...AnyUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject16 = function _templateObject16() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject15() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation UnfollowUser($id: String!) {\\n  unfollowUser(id: $id) {\\n    ...AnyUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject15 = function _templateObject15() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject14() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Share($id: String!) {\\n  share(id: $id)\\n}\\n    \"]);\n\n  _templateObject14 = function _templateObject14() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject13() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Register($options: UsernamePasswordInput!) {\\n  register(options: $options) {\\n    ...AnyUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject13 = function _templateObject13() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject12() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Logout {\\n  logout\\n}\\n    \"]);\n\n  _templateObject12 = function _templateObject12() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject11() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Login($usernameOrEmail: String!, $password: String!) {\\n  login(usernameOrEmail: $usernameOrEmail, password: $password) {\\n    ...AnyUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject11 = function _templateObject11() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Like($id: String!) {\\n  like(id: $id)\\n}\\n    \"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Follow($id: String!) {\\n  followUser(id: $id) {\\n    ...AnyUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation DeletePost($id: String!) {\\n  deletePost(id: $id)\\n}\\n    \"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CreatePost($content: String!) {\\n  createPost(content: $content) {\\n    ...AnyPostResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CommentPost($id: String!, $content: String!) {\\n  commentPost(id: $id, content: $content) {\\n    post {\\n      id\\n      author\\n      content\\n      created_at\\n      updated_at\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation DeleteSub($id: String!, $subid: String!) {\\n  deleteSub(id: $id, subid: $subid) {\\n    errors {\\n      field\\n      message\\n    }\\n    post {\\n      id\\n      author\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment AnyUserResponse on UserResponse {\\n  errors {\\n    field\\n    message\\n  }\\n  user {\\n    ...AnyUser\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment AnyUser on User {\\n  id\\n  username\\n  name\\n  email\\n  avatar\\n  description\\n  followers\\n  following\\n  verified\\n  permissions\\n  createdAt\\n  updatedAt\\n}\\n    \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment AnyPostResponse on PostResponse {\\n  errors {\\n    field\\n    message\\n  }\\n  post {\\n    ...PostSnippet\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment PostSnippet on Post {\\n  id\\n  author\\n  content\\n  likes\\n  shares\\n  media\\n  subs {\\n    id\\n    createdAt\\n    owner {\\n      id\\n      username\\n      avatar\\n      verified\\n    }\\n  }\\n  creator {\\n    id\\n    username\\n    name\\n    verified\\n    avatar\\n  }\\n  created_at\\n  updated_at\\n}\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport var PostSnippetFragmentDoc = gql(_templateObject());\nexport var AnyPostResponseFragmentDoc = gql(_templateObject2(), PostSnippetFragmentDoc);\nexport var AnyUserFragmentDoc = gql(_templateObject3());\nexport var AnyUserResponseFragmentDoc = gql(_templateObject4(), AnyUserFragmentDoc);\nexport var DeleteSubDocument = gql(_templateObject5());\n\n/**\n * __useDeleteSubMutation__\n *\n * To run a mutation, you first call `useDeleteSubMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteSubMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteSubMutation, { data, loading, error }] = useDeleteSubMutation({\n *   variables: {\n *      id: // value for 'id'\n *      subid: // value for 'subid'\n *   },\n * });\n */\nexport function useDeleteSubMutation(baseOptions) {\n  _s();\n\n  return Apollo.useMutation(DeleteSubDocument, baseOptions);\n}\n\n_s(useDeleteSubMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var CommentPostDocument = gql(_templateObject6());\n\n/**\n * __useCommentPostMutation__\n *\n * To run a mutation, you first call `useCommentPostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCommentPostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [commentPostMutation, { data, loading, error }] = useCommentPostMutation({\n *   variables: {\n *      id: // value for 'id'\n *      content: // value for 'content'\n *   },\n * });\n */\nexport function useCommentPostMutation(baseOptions) {\n  _s2();\n\n  return Apollo.useMutation(CommentPostDocument, baseOptions);\n}\n\n_s2(useCommentPostMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var CreatePostDocument = gql(_templateObject7(), AnyPostResponseFragmentDoc);\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      content: // value for 'content'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions) {\n  _s3();\n\n  return Apollo.useMutation(CreatePostDocument, baseOptions);\n}\n\n_s3(useCreatePostMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var DeletePostDocument = gql(_templateObject8());\n\n/**\n * __useDeletePostMutation__\n *\n * To run a mutation, you first call `useDeletePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePostMutation, { data, loading, error }] = useDeletePostMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeletePostMutation(baseOptions) {\n  _s4();\n\n  return Apollo.useMutation(DeletePostDocument, baseOptions);\n}\n\n_s4(useDeletePostMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var FollowDocument = gql(_templateObject9(), AnyUserResponseFragmentDoc);\n\n/**\n * __useFollowMutation__\n *\n * To run a mutation, you first call `useFollowMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useFollowMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [followMutation, { data, loading, error }] = useFollowMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFollowMutation(baseOptions) {\n  _s5();\n\n  return Apollo.useMutation(FollowDocument, baseOptions);\n}\n\n_s5(useFollowMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var LikeDocument = gql(_templateObject10());\n\n/**\n * __useLikeMutation__\n *\n * To run a mutation, you first call `useLikeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLikeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [likeMutation, { data, loading, error }] = useLikeMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useLikeMutation(baseOptions) {\n  _s6();\n\n  return Apollo.useMutation(LikeDocument, baseOptions);\n}\n\n_s6(useLikeMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var LoginDocument = gql(_templateObject11(), AnyUserResponseFragmentDoc);\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      usernameOrEmail: // value for 'usernameOrEmail'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  _s7();\n\n  return Apollo.useMutation(LoginDocument, baseOptions);\n}\n\n_s7(useLoginMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var LogoutDocument = gql(_templateObject12());\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions) {\n  _s8();\n\n  return Apollo.useMutation(LogoutDocument, baseOptions);\n}\n\n_s8(useLogoutMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var RegisterDocument = gql(_templateObject13(), AnyUserResponseFragmentDoc);\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions) {\n  _s9();\n\n  return Apollo.useMutation(RegisterDocument, baseOptions);\n}\n\n_s9(useRegisterMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var ShareDocument = gql(_templateObject14());\n\n/**\n * __useShareMutation__\n *\n * To run a mutation, you first call `useShareMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useShareMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [shareMutation, { data, loading, error }] = useShareMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useShareMutation(baseOptions) {\n  _s10();\n\n  return Apollo.useMutation(ShareDocument, baseOptions);\n}\n\n_s10(useShareMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var UnfollowUserDocument = gql(_templateObject15(), AnyUserResponseFragmentDoc);\n\n/**\n * __useUnfollowUserMutation__\n *\n * To run a mutation, you first call `useUnfollowUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUnfollowUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [unfollowUserMutation, { data, loading, error }] = useUnfollowUserMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUnfollowUserMutation(baseOptions) {\n  _s11();\n\n  return Apollo.useMutation(UnfollowUserDocument, baseOptions);\n}\n\n_s11(useUnfollowUserMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var UpdateAccountDocument = gql(_templateObject16(), AnyUserResponseFragmentDoc);\n\n/**\n * __useUpdateAccountMutation__\n *\n * To run a mutation, you first call `useUpdateAccountMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateAccountMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateAccountMutation, { data, loading, error }] = useUpdateAccountMutation({\n *   variables: {\n *      private: // value for 'private'\n *      avatar: // value for 'avatar'\n *      description: // value for 'description'\n *      location: // value for 'location'\n *      email: // value for 'email'\n *      name: // value for 'name'\n *      username: // value for 'username'\n *   },\n * });\n */\nexport function useUpdateAccountMutation(baseOptions) {\n  _s12();\n\n  return Apollo.useMutation(UpdateAccountDocument, baseOptions);\n}\n\n_s12(useUpdateAccountMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var UpdatePostDocument = gql(_templateObject17(), AnyPostResponseFragmentDoc);\n\n/**\n * __useUpdatePostMutation__\n *\n * To run a mutation, you first call `useUpdatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePostMutation, { data, loading, error }] = useUpdatePostMutation({\n *   variables: {\n *      id: // value for 'id'\n *      content: // value for 'content'\n *   },\n * });\n */\nexport function useUpdatePostMutation(baseOptions) {\n  _s13();\n\n  return Apollo.useMutation(UpdatePostDocument, baseOptions);\n}\n\n_s13(useUpdatePostMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var MeDocument = gql(_templateObject18(), AnyUserFragmentDoc);\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  _s14();\n\n  return Apollo.useQuery(MeDocument, baseOptions);\n}\n\n_s14(useMeQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useMeLazyQuery(baseOptions) {\n  _s15();\n\n  return Apollo.useLazyQuery(MeDocument, baseOptions);\n}\n\n_s15(useMeLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var PostDocument = gql(_templateObject19(), PostSnippetFragmentDoc);\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function usePostQuery(baseOptions) {\n  _s16();\n\n  return Apollo.useQuery(PostDocument, baseOptions);\n}\n\n_s16(usePostQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function usePostLazyQuery(baseOptions) {\n  _s17();\n\n  return Apollo.useLazyQuery(PostDocument, baseOptions);\n}\n\n_s17(usePostLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var PostsDocument = gql(_templateObject20(), PostSnippetFragmentDoc);\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\n\nexport function usePostsQuery(baseOptions) {\n  _s18();\n\n  return Apollo.useQuery(PostsDocument, baseOptions);\n}\n\n_s18(usePostsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function usePostsLazyQuery(baseOptions) {\n  _s19();\n\n  return Apollo.useLazyQuery(PostsDocument, baseOptions);\n}\n\n_s19(usePostsLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var UserDocument = gql(_templateObject21());\n/**\n * __useUserQuery__\n *\n * To run a query within a React component, call `useUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserQuery({\n *   variables: {\n *      username: // value for 'username'\n *   },\n * });\n */\n\nexport function useUserQuery(baseOptions) {\n  _s20();\n\n  return Apollo.useQuery(UserDocument, baseOptions);\n}\n\n_s20(useUserQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useUserLazyQuery(baseOptions) {\n  _s21();\n\n  return Apollo.useLazyQuery(UserDocument, baseOptions);\n}\n\n_s21(useUserLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});","map":{"version":3,"sources":["C:/Users/root/Desktop/dev/frontend/web/src/generated/graphql.tsx"],"names":["gql","Apollo","PostSnippetFragmentDoc","AnyPostResponseFragmentDoc","AnyUserFragmentDoc","AnyUserResponseFragmentDoc","DeleteSubDocument","useDeleteSubMutation","baseOptions","useMutation","CommentPostDocument","useCommentPostMutation","CreatePostDocument","useCreatePostMutation","DeletePostDocument","useDeletePostMutation","FollowDocument","useFollowMutation","LikeDocument","useLikeMutation","LoginDocument","useLoginMutation","LogoutDocument","useLogoutMutation","RegisterDocument","useRegisterMutation","ShareDocument","useShareMutation","UnfollowUserDocument","useUnfollowUserMutation","UpdateAccountDocument","useUpdateAccountMutation","UpdatePostDocument","useUpdatePostMutation","MeDocument","useMeQuery","useQuery","useMeLazyQuery","useLazyQuery","PostDocument","usePostQuery","usePostLazyQuery","PostsDocument","usePostsQuery","usePostsLazyQuery","UserDocument","useUserQuery","useUserLazyQuery"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AA+gBA,OAAO,IAAMC,sBAAsB,GAAGF,GAAH,mBAA5B;AA6BP,OAAO,IAAMG,0BAA0B,GAAGH,GAAH,qBAUjCE,sBAViC,CAAhC;AAWP,OAAO,IAAME,kBAAkB,GAAGJ,GAAH,oBAAxB;AAgBP,OAAO,IAAMK,0BAA0B,GAAGL,GAAH,qBAUjCI,kBAViC,CAAhC;AAWP,OAAO,IAAME,iBAAiB,GAAGN,GAAH,oBAAvB;;AAgBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,oBAAT,CAA8BC,WAA9B,EAAuH;AAAA;;AACtH,SAAOP,MAAM,CAACQ,WAAP,CAAkEH,iBAAlE,EAAqFE,WAArF,CAAP;AACD;;GAFSD,oB;UACDN,MAAM,CAACQ,W;;;AAKtB,OAAO,IAAMC,mBAAmB,GAAGV,GAAH,oBAAzB;;AAeP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASW,sBAAT,CAAgCH,WAAhC,EAA6H;AAAA;;AAC5H,SAAOP,MAAM,CAACQ,WAAP,CAAsEC,mBAAtE,EAA2FF,WAA3F,CAAP;AACD;;IAFSG,sB;UACDV,MAAM,CAACQ,W;;;AAKtB,OAAO,IAAMG,kBAAkB,GAAGZ,GAAH,qBAMzBG,0BANyB,CAAxB;;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASU,qBAAT,CAA+BL,WAA/B,EAA0H;AAAA;;AACzH,SAAOP,MAAM,CAACQ,WAAP,CAAoEG,kBAApE,EAAwFJ,WAAxF,CAAP;AACD;;IAFSK,qB;UACDZ,MAAM,CAACQ,W;;;AAKtB,OAAO,IAAMK,kBAAkB,GAAGd,GAAH,oBAAxB;;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASe,qBAAT,CAA+BP,WAA/B,EAA0H;AAAA;;AACzH,SAAOP,MAAM,CAACQ,WAAP,CAAoEK,kBAApE,EAAwFN,WAAxF,CAAP;AACD;;IAFSO,qB;UACDd,MAAM,CAACQ,W;;;AAKtB,OAAO,IAAMO,cAAc,GAAGhB,GAAH,qBAMrBK,0BANqB,CAApB;;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASY,iBAAT,CAA2BT,WAA3B,EAA8G;AAAA;;AAC7G,SAAOP,MAAM,CAACQ,WAAP,CAA4DO,cAA5D,EAA4ER,WAA5E,CAAP;AACD;;IAFSS,iB;UACDhB,MAAM,CAACQ,W;;;AAKtB,OAAO,IAAMS,YAAY,GAAGlB,GAAH,qBAAlB;;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASmB,eAAT,CAAyBX,WAAzB,EAAwG;AAAA;;AACvG,SAAOP,MAAM,CAACQ,WAAP,CAAwDS,YAAxD,EAAsEV,WAAtE,CAAP;AACD;;IAFSW,e;UACDlB,MAAM,CAACQ,W;;;AAKtB,OAAO,IAAMW,aAAa,GAAGpB,GAAH,sBAMpBK,0BANoB,CAAnB;;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASgB,gBAAT,CAA0Bb,WAA1B,EAA2G;AAAA;;AAC1G,SAAOP,MAAM,CAACQ,WAAP,CAA0DW,aAA1D,EAAyEZ,WAAzE,CAAP;AACD;;IAFSa,gB;UACDpB,MAAM,CAACQ,W;;;AAKtB,OAAO,IAAMa,cAAc,GAAGtB,GAAH,qBAApB;;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASuB,iBAAT,CAA2Bf,WAA3B,EAA8G;AAAA;;AAC7G,SAAOP,MAAM,CAACQ,WAAP,CAA4Da,cAA5D,EAA4Ed,WAA5E,CAAP;AACD;;IAFSe,iB;UACDtB,MAAM,CAACQ,W;;;AAKtB,OAAO,IAAMe,gBAAgB,GAAGxB,GAAH,sBAMvBK,0BANuB,CAAtB;;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASoB,mBAAT,CAA6BjB,WAA7B,EAAoH;AAAA;;AACnH,SAAOP,MAAM,CAACQ,WAAP,CAAgEe,gBAAhE,EAAkFhB,WAAlF,CAAP;AACD;;IAFSiB,mB;UACDxB,MAAM,CAACQ,W;;;AAKtB,OAAO,IAAMiB,aAAa,GAAG1B,GAAH,qBAAnB;;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS2B,gBAAT,CAA0BnB,WAA1B,EAA2G;AAAA;;AAC1G,SAAOP,MAAM,CAACQ,WAAP,CAA0DiB,aAA1D,EAAyElB,WAAzE,CAAP;AACD;;KAFSmB,gB;UACD1B,MAAM,CAACQ,W;;;AAKtB,OAAO,IAAMmB,oBAAoB,GAAG5B,GAAH,sBAM3BK,0BAN2B,CAA1B;;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASwB,uBAAT,CAAiCrB,WAAjC,EAAgI;AAAA;;AAC/H,SAAOP,MAAM,CAACQ,WAAP,CAAwEmB,oBAAxE,EAA8FpB,WAA9F,CAAP;AACD;;KAFSqB,uB;UACD5B,MAAM,CAACQ,W;;;AAKtB,OAAO,IAAMqB,qBAAqB,GAAG9B,GAAH,sBAc5BK,0BAd4B,CAA3B;;AAiBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS0B,wBAAT,CAAkCvB,WAAlC,EAAmI;AAAA;;AAClI,SAAOP,MAAM,CAACQ,WAAP,CAA0EqB,qBAA1E,EAAiGtB,WAAjG,CAAP;AACD;;KAFSuB,wB;UACD9B,MAAM,CAACQ,W;;;AAKtB,OAAO,IAAMuB,kBAAkB,GAAGhC,GAAH,sBAMzBG,0BANyB,CAAxB;;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS8B,qBAAT,CAA+BzB,WAA/B,EAA0H;AAAA;;AACzH,SAAOP,MAAM,CAACQ,WAAP,CAAoEuB,kBAApE,EAAwFxB,WAAxF,CAAP;AACD;;KAFSyB,qB;UACDhC,MAAM,CAACQ,W;;;AAKtB,OAAO,IAAMyB,UAAU,GAAGlC,GAAH,sBAMjBI,kBANiB,CAAhB;AAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS+B,UAAT,CAAoB3B,WAApB,EAAsF;AAAA;;AACrF,SAAOP,MAAM,CAACmC,QAAP,CAA2CF,UAA3C,EAAuD1B,WAAvD,CAAP;AACD;;KAFS2B,U;UACDlC,MAAM,CAACmC,Q;;;AAEtB,OAAO,SAASC,cAAT,CAAwB7B,WAAxB,EAA8F;AAAA;;AAC3F,SAAOP,MAAM,CAACqC,YAAP,CAA+CJ,UAA/C,EAA2D1B,WAA3D,CAAP;AACD;;KAFO6B,c;UACCpC,MAAM,CAACqC,Y;;;AAKxB,OAAO,IAAMC,YAAY,GAAGvC,GAAH,sBAMnBE,sBANmB,CAAlB;AAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASsC,YAAT,CAAsBhC,WAAtB,EAA2F;AAAA;;AAC1F,SAAOP,MAAM,CAACmC,QAAP,CAA+CG,YAA/C,EAA6D/B,WAA7D,CAAP;AACD;;KAFSgC,Y;UACDvC,MAAM,CAACmC,Q;;;AAEtB,OAAO,SAASK,gBAAT,CAA0BjC,WAA1B,EAAoG;AAAA;;AACjG,SAAOP,MAAM,CAACqC,YAAP,CAAmDC,YAAnD,EAAiE/B,WAAjE,CAAP;AACD;;KAFOiC,gB;UACCxC,MAAM,CAACqC,Y;;;AAKxB,OAAO,IAAMI,aAAa,GAAG1C,GAAH,sBASpBE,sBAToB,CAAnB;AAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASyC,aAAT,CAAuBnC,WAAvB,EAA8F;AAAA;;AAC7F,SAAOP,MAAM,CAACmC,QAAP,CAAiDM,aAAjD,EAAgElC,WAAhE,CAAP;AACD;;KAFSmC,a;UACD1C,MAAM,CAACmC,Q;;;AAEtB,OAAO,SAASQ,iBAAT,CAA2BpC,WAA3B,EAAuG;AAAA;;AACpG,SAAOP,MAAM,CAACqC,YAAP,CAAqDI,aAArD,EAAoElC,WAApE,CAAP;AACD;;KAFOoC,iB;UACC3C,MAAM,CAACqC,Y;;;AAKxB,OAAO,IAAMO,YAAY,GAAG7C,GAAH,qBAAlB;AAwBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS8C,YAAT,CAAsBtC,WAAtB,EAA2F;AAAA;;AAC1F,SAAOP,MAAM,CAACmC,QAAP,CAA+CS,YAA/C,EAA6DrC,WAA7D,CAAP;AACD;;KAFSsC,Y;UACD7C,MAAM,CAACmC,Q;;;AAEtB,OAAO,SAASW,gBAAT,CAA0BvC,WAA1B,EAAoG;AAAA;;AACjG,SAAOP,MAAM,CAACqC,YAAP,CAAmDO,YAAnD,EAAiErC,WAAjE,CAAP;AACD;;KAFOuC,gB;UACC9C,MAAM,CAACqC,Y","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  posts: PaginatedPosts;\n  post?: Maybe<Post>;\n  me?: Maybe<User>;\n  user: UserResponse;\n  register: Scalars['String'];\n};\n\n\nexport type QueryPostsArgs = {\n  cursor?: Maybe<Scalars['String']>;\n  limit: Scalars['Int'];\n};\n\n\nexport type QueryPostArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryUserArgs = {\n  username: Scalars['String'];\n};\n\n\nexport type QueryRegisterArgs = {\n  options: UsernamePasswordInput;\n};\n\nexport type PaginatedPosts = {\n  __typename?: 'PaginatedPosts';\n  posts: Array<Post>;\n  hasMore: Scalars['Boolean'];\n};\n\nexport type Post = {\n  __typename?: 'Post';\n  id: Scalars['String'];\n  author: Scalars['String'];\n  creator: Creator;\n  content: Scalars['String'];\n  media: Array<Scalars['String']>;\n  likes: Array<Scalars['String']>;\n  shares: Array<Scalars['String']>;\n  subs: Array<Subs>;\n  created_at: Scalars['String'];\n  updated_at: Scalars['String'];\n};\n\nexport type Creator = {\n  __typename?: 'Creator';\n  id?: Maybe<Scalars['String']>;\n  username?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  avatar?: Maybe<Scalars['String']>;\n  verified?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Subs = {\n  __typename?: 'Subs';\n  id?: Maybe<Scalars['String']>;\n  owner?: Maybe<Owner>;\n  content?: Maybe<Scalars['String']>;\n  likes?: Maybe<Scalars['String']>;\n  shares?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['String']>;\n};\n\nexport type Owner = {\n  __typename?: 'Owner';\n  id?: Maybe<Scalars['String']>;\n  verified?: Maybe<Scalars['Boolean']>;\n  avatar?: Maybe<Scalars['String']>;\n  username?: Maybe<Scalars['String']>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['String'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n  name: Scalars['String'];\n  avatar: Scalars['String'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n  location: Scalars['String'];\n  description: Scalars['String'];\n  private: Scalars['Boolean'];\n  verified: Scalars['Boolean'];\n  blocked: Array<Scalars['String']>;\n  followers: Array<Scalars['String']>;\n  following: Array<Scalars['String']>;\n  permissions: Array<Scalars['String']>;\n  posts: Array<Scalars['String']>;\n  totpSecret: Scalars['String'];\n  totpEnabled: Scalars['Boolean'];\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  errors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type UsernamePasswordInput = {\n  email: Scalars['String'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  like: Scalars['Boolean'];\n  share: Scalars['Boolean'];\n  commentPost: PostResponse;\n  deleteSub: PostResponse;\n  createPost: PostResponse;\n  updatePost?: Maybe<PostResponse>;\n  deletePost: Scalars['Boolean'];\n  followUser: UserResponse;\n  unfollowUser: UserResponse;\n  updateAccount: UserResponse;\n  updateUser: UserResponse;\n  forgotPassword: Scalars['Boolean'];\n  register: UserResponse;\n  login: UserResponse;\n  logout: Scalars['Boolean'];\n};\n\n\nexport type MutationLikeArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationShareArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationCommentPostArgs = {\n  content: Scalars['String'];\n  id: Scalars['String'];\n};\n\n\nexport type MutationDeleteSubArgs = {\n  subid: Scalars['String'];\n  id: Scalars['String'];\n};\n\n\nexport type MutationCreatePostArgs = {\n  content: Scalars['String'];\n};\n\n\nexport type MutationUpdatePostArgs = {\n  content?: Maybe<Scalars['String']>;\n  id: Scalars['String'];\n};\n\n\nexport type MutationDeletePostArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationFollowUserArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationUnfollowUserArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationUpdateAccountArgs = {\n  private?: Maybe<Scalars['Boolean']>;\n  avatar?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  location?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  verified?: Maybe<Scalars['Boolean']>;\n  private?: Maybe<Scalars['Boolean']>;\n  avatar?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  location?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  options: UsernamePasswordInput;\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  usernameOrEmail: Scalars['String'];\n};\n\nexport type PostResponse = {\n  __typename?: 'PostResponse';\n  errors?: Maybe<Array<FieldErrors>>;\n  post?: Maybe<Post>;\n};\n\nexport type FieldErrors = {\n  __typename?: 'FieldErrors';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type AnyPostResponseFragment = (\n  { __typename?: 'PostResponse' }\n  & { errors?: Maybe<Array<(\n    { __typename?: 'FieldErrors' }\n    & Pick<FieldErrors, 'field' | 'message'>\n  )>>, post?: Maybe<(\n    { __typename?: 'Post' }\n    & PostSnippetFragment\n  )> }\n);\n\nexport type AnyUserFragment = (\n  { __typename?: 'User' }\n  & Pick<User, 'id' | 'username' | 'name' | 'email' | 'avatar' | 'description' | 'followers' | 'following' | 'verified' | 'permissions' | 'createdAt' | 'updatedAt'>\n);\n\nexport type AnyUserResponseFragment = (\n  { __typename?: 'UserResponse' }\n  & { errors?: Maybe<Array<(\n    { __typename?: 'FieldError' }\n    & Pick<FieldError, 'field' | 'message'>\n  )>>, user?: Maybe<(\n    { __typename?: 'User' }\n    & AnyUserFragment\n  )> }\n);\n\nexport type PostSnippetFragment = (\n  { __typename?: 'Post' }\n  & Pick<Post, 'id' | 'author' | 'content' | 'likes' | 'shares' | 'media' | 'created_at' | 'updated_at'>\n  & { subs: Array<(\n    { __typename?: 'Subs' }\n    & Pick<Subs, 'id' | 'createdAt'>\n    & { owner?: Maybe<(\n      { __typename?: 'Owner' }\n      & Pick<Owner, 'id' | 'username' | 'avatar' | 'verified'>\n    )> }\n  )>, creator: (\n    { __typename?: 'Creator' }\n    & Pick<Creator, 'id' | 'username' | 'name' | 'verified' | 'avatar'>\n  ) }\n);\n\nexport type DeleteSubMutationVariables = Exact<{\n  id: Scalars['String'];\n  subid: Scalars['String'];\n}>;\n\n\nexport type DeleteSubMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteSub: (\n    { __typename?: 'PostResponse' }\n    & { errors?: Maybe<Array<(\n      { __typename?: 'FieldErrors' }\n      & Pick<FieldErrors, 'field' | 'message'>\n    )>>, post?: Maybe<(\n      { __typename?: 'Post' }\n      & Pick<Post, 'id' | 'author'>\n    )> }\n  ) }\n);\n\nexport type CommentPostMutationVariables = Exact<{\n  id: Scalars['String'];\n  content: Scalars['String'];\n}>;\n\n\nexport type CommentPostMutation = (\n  { __typename?: 'Mutation' }\n  & { commentPost: (\n    { __typename?: 'PostResponse' }\n    & { post?: Maybe<(\n      { __typename?: 'Post' }\n      & Pick<Post, 'id' | 'author' | 'content' | 'created_at' | 'updated_at'>\n    )> }\n  ) }\n);\n\nexport type CreatePostMutationVariables = Exact<{\n  content: Scalars['String'];\n}>;\n\n\nexport type CreatePostMutation = (\n  { __typename?: 'Mutation' }\n  & { createPost: (\n    { __typename?: 'PostResponse' }\n    & AnyPostResponseFragment\n  ) }\n);\n\nexport type DeletePostMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type DeletePostMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deletePost'>\n);\n\nexport type FollowMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type FollowMutation = (\n  { __typename?: 'Mutation' }\n  & { followUser: (\n    { __typename?: 'UserResponse' }\n    & AnyUserResponseFragment\n  ) }\n);\n\nexport type LikeMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type LikeMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'like'>\n);\n\nexport type LoginMutationVariables = Exact<{\n  usernameOrEmail: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'UserResponse' }\n    & AnyUserResponseFragment\n  ) }\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type RegisterMutationVariables = Exact<{\n  options: UsernamePasswordInput;\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'UserResponse' }\n    & AnyUserResponseFragment\n  ) }\n);\n\nexport type ShareMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type ShareMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'share'>\n);\n\nexport type UnfollowUserMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type UnfollowUserMutation = (\n  { __typename?: 'Mutation' }\n  & { unfollowUser: (\n    { __typename?: 'UserResponse' }\n    & AnyUserResponseFragment\n  ) }\n);\n\nexport type UpdateAccountMutationVariables = Exact<{\n  private: Scalars['Boolean'];\n  avatar: Scalars['String'];\n  description: Scalars['String'];\n  location: Scalars['String'];\n  email: Scalars['String'];\n  name: Scalars['String'];\n  username: Scalars['String'];\n}>;\n\n\nexport type UpdateAccountMutation = (\n  { __typename?: 'Mutation' }\n  & { updateAccount: (\n    { __typename?: 'UserResponse' }\n    & AnyUserResponseFragment\n  ) }\n);\n\nexport type UpdatePostMutationVariables = Exact<{\n  id: Scalars['String'];\n  content: Scalars['String'];\n}>;\n\n\nexport type UpdatePostMutation = (\n  { __typename?: 'Mutation' }\n  & { updatePost?: Maybe<(\n    { __typename?: 'PostResponse' }\n    & AnyPostResponseFragment\n  )> }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & AnyUserFragment\n  )> }\n);\n\nexport type PostQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type PostQuery = (\n  { __typename?: 'Query' }\n  & { post?: Maybe<(\n    { __typename?: 'Post' }\n    & PostSnippetFragment\n  )> }\n);\n\nexport type PostsQueryVariables = Exact<{\n  limit: Scalars['Int'];\n  cursor?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type PostsQuery = (\n  { __typename?: 'Query' }\n  & { posts: (\n    { __typename?: 'PaginatedPosts' }\n    & Pick<PaginatedPosts, 'hasMore'>\n    & { posts: Array<(\n      { __typename?: 'Post' }\n      & PostSnippetFragment\n    )> }\n  ) }\n);\n\nexport type UserQueryVariables = Exact<{\n  username: Scalars['String'];\n}>;\n\n\nexport type UserQuery = (\n  { __typename?: 'Query' }\n  & { user: (\n    { __typename?: 'UserResponse' }\n    & { errors?: Maybe<Array<(\n      { __typename?: 'FieldError' }\n      & Pick<FieldError, 'field' | 'message'>\n    )>>, user?: Maybe<(\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'username' | 'name' | 'avatar' | 'description' | 'followers' | 'following' | 'verified' | 'permissions' | 'createdAt' | 'updatedAt'>\n    )> }\n  ) }\n);\n\nexport const PostSnippetFragmentDoc = gql`\n    fragment PostSnippet on Post {\n  id\n  author\n  content\n  likes\n  shares\n  media\n  subs {\n    id\n    createdAt\n    owner {\n      id\n      username\n      avatar\n      verified\n    }\n  }\n  creator {\n    id\n    username\n    name\n    verified\n    avatar\n  }\n  created_at\n  updated_at\n}\n    `;\nexport const AnyPostResponseFragmentDoc = gql`\n    fragment AnyPostResponse on PostResponse {\n  errors {\n    field\n    message\n  }\n  post {\n    ...PostSnippet\n  }\n}\n    ${PostSnippetFragmentDoc}`;\nexport const AnyUserFragmentDoc = gql`\n    fragment AnyUser on User {\n  id\n  username\n  name\n  email\n  avatar\n  description\n  followers\n  following\n  verified\n  permissions\n  createdAt\n  updatedAt\n}\n    `;\nexport const AnyUserResponseFragmentDoc = gql`\n    fragment AnyUserResponse on UserResponse {\n  errors {\n    field\n    message\n  }\n  user {\n    ...AnyUser\n  }\n}\n    ${AnyUserFragmentDoc}`;\nexport const DeleteSubDocument = gql`\n    mutation DeleteSub($id: String!, $subid: String!) {\n  deleteSub(id: $id, subid: $subid) {\n    errors {\n      field\n      message\n    }\n    post {\n      id\n      author\n    }\n  }\n}\n    `;\nexport type DeleteSubMutationFn = Apollo.MutationFunction<DeleteSubMutation, DeleteSubMutationVariables>;\n\n/**\n * __useDeleteSubMutation__\n *\n * To run a mutation, you first call `useDeleteSubMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteSubMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteSubMutation, { data, loading, error }] = useDeleteSubMutation({\n *   variables: {\n *      id: // value for 'id'\n *      subid: // value for 'subid'\n *   },\n * });\n */\nexport function useDeleteSubMutation(baseOptions?: Apollo.MutationHookOptions<DeleteSubMutation, DeleteSubMutationVariables>) {\n        return Apollo.useMutation<DeleteSubMutation, DeleteSubMutationVariables>(DeleteSubDocument, baseOptions);\n      }\nexport type DeleteSubMutationHookResult = ReturnType<typeof useDeleteSubMutation>;\nexport type DeleteSubMutationResult = Apollo.MutationResult<DeleteSubMutation>;\nexport type DeleteSubMutationOptions = Apollo.BaseMutationOptions<DeleteSubMutation, DeleteSubMutationVariables>;\nexport const CommentPostDocument = gql`\n    mutation CommentPost($id: String!, $content: String!) {\n  commentPost(id: $id, content: $content) {\n    post {\n      id\n      author\n      content\n      created_at\n      updated_at\n    }\n  }\n}\n    `;\nexport type CommentPostMutationFn = Apollo.MutationFunction<CommentPostMutation, CommentPostMutationVariables>;\n\n/**\n * __useCommentPostMutation__\n *\n * To run a mutation, you first call `useCommentPostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCommentPostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [commentPostMutation, { data, loading, error }] = useCommentPostMutation({\n *   variables: {\n *      id: // value for 'id'\n *      content: // value for 'content'\n *   },\n * });\n */\nexport function useCommentPostMutation(baseOptions?: Apollo.MutationHookOptions<CommentPostMutation, CommentPostMutationVariables>) {\n        return Apollo.useMutation<CommentPostMutation, CommentPostMutationVariables>(CommentPostDocument, baseOptions);\n      }\nexport type CommentPostMutationHookResult = ReturnType<typeof useCommentPostMutation>;\nexport type CommentPostMutationResult = Apollo.MutationResult<CommentPostMutation>;\nexport type CommentPostMutationOptions = Apollo.BaseMutationOptions<CommentPostMutation, CommentPostMutationVariables>;\nexport const CreatePostDocument = gql`\n    mutation CreatePost($content: String!) {\n  createPost(content: $content) {\n    ...AnyPostResponse\n  }\n}\n    ${AnyPostResponseFragmentDoc}`;\nexport type CreatePostMutationFn = Apollo.MutationFunction<CreatePostMutation, CreatePostMutationVariables>;\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      content: // value for 'content'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions?: Apollo.MutationHookOptions<CreatePostMutation, CreatePostMutationVariables>) {\n        return Apollo.useMutation<CreatePostMutation, CreatePostMutationVariables>(CreatePostDocument, baseOptions);\n      }\nexport type CreatePostMutationHookResult = ReturnType<typeof useCreatePostMutation>;\nexport type CreatePostMutationResult = Apollo.MutationResult<CreatePostMutation>;\nexport type CreatePostMutationOptions = Apollo.BaseMutationOptions<CreatePostMutation, CreatePostMutationVariables>;\nexport const DeletePostDocument = gql`\n    mutation DeletePost($id: String!) {\n  deletePost(id: $id)\n}\n    `;\nexport type DeletePostMutationFn = Apollo.MutationFunction<DeletePostMutation, DeletePostMutationVariables>;\n\n/**\n * __useDeletePostMutation__\n *\n * To run a mutation, you first call `useDeletePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePostMutation, { data, loading, error }] = useDeletePostMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeletePostMutation(baseOptions?: Apollo.MutationHookOptions<DeletePostMutation, DeletePostMutationVariables>) {\n        return Apollo.useMutation<DeletePostMutation, DeletePostMutationVariables>(DeletePostDocument, baseOptions);\n      }\nexport type DeletePostMutationHookResult = ReturnType<typeof useDeletePostMutation>;\nexport type DeletePostMutationResult = Apollo.MutationResult<DeletePostMutation>;\nexport type DeletePostMutationOptions = Apollo.BaseMutationOptions<DeletePostMutation, DeletePostMutationVariables>;\nexport const FollowDocument = gql`\n    mutation Follow($id: String!) {\n  followUser(id: $id) {\n    ...AnyUserResponse\n  }\n}\n    ${AnyUserResponseFragmentDoc}`;\nexport type FollowMutationFn = Apollo.MutationFunction<FollowMutation, FollowMutationVariables>;\n\n/**\n * __useFollowMutation__\n *\n * To run a mutation, you first call `useFollowMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useFollowMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [followMutation, { data, loading, error }] = useFollowMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFollowMutation(baseOptions?: Apollo.MutationHookOptions<FollowMutation, FollowMutationVariables>) {\n        return Apollo.useMutation<FollowMutation, FollowMutationVariables>(FollowDocument, baseOptions);\n      }\nexport type FollowMutationHookResult = ReturnType<typeof useFollowMutation>;\nexport type FollowMutationResult = Apollo.MutationResult<FollowMutation>;\nexport type FollowMutationOptions = Apollo.BaseMutationOptions<FollowMutation, FollowMutationVariables>;\nexport const LikeDocument = gql`\n    mutation Like($id: String!) {\n  like(id: $id)\n}\n    `;\nexport type LikeMutationFn = Apollo.MutationFunction<LikeMutation, LikeMutationVariables>;\n\n/**\n * __useLikeMutation__\n *\n * To run a mutation, you first call `useLikeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLikeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [likeMutation, { data, loading, error }] = useLikeMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useLikeMutation(baseOptions?: Apollo.MutationHookOptions<LikeMutation, LikeMutationVariables>) {\n        return Apollo.useMutation<LikeMutation, LikeMutationVariables>(LikeDocument, baseOptions);\n      }\nexport type LikeMutationHookResult = ReturnType<typeof useLikeMutation>;\nexport type LikeMutationResult = Apollo.MutationResult<LikeMutation>;\nexport type LikeMutationOptions = Apollo.BaseMutationOptions<LikeMutation, LikeMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($usernameOrEmail: String!, $password: String!) {\n  login(usernameOrEmail: $usernameOrEmail, password: $password) {\n    ...AnyUserResponse\n  }\n}\n    ${AnyUserResponseFragmentDoc}`;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      usernameOrEmail: // value for 'usernameOrEmail'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($options: UsernamePasswordInput!) {\n  register(options: $options) {\n    ...AnyUserResponse\n  }\n}\n    ${AnyUserResponseFragmentDoc}`;\nexport type RegisterMutationFn = Apollo.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: Apollo.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const ShareDocument = gql`\n    mutation Share($id: String!) {\n  share(id: $id)\n}\n    `;\nexport type ShareMutationFn = Apollo.MutationFunction<ShareMutation, ShareMutationVariables>;\n\n/**\n * __useShareMutation__\n *\n * To run a mutation, you first call `useShareMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useShareMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [shareMutation, { data, loading, error }] = useShareMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useShareMutation(baseOptions?: Apollo.MutationHookOptions<ShareMutation, ShareMutationVariables>) {\n        return Apollo.useMutation<ShareMutation, ShareMutationVariables>(ShareDocument, baseOptions);\n      }\nexport type ShareMutationHookResult = ReturnType<typeof useShareMutation>;\nexport type ShareMutationResult = Apollo.MutationResult<ShareMutation>;\nexport type ShareMutationOptions = Apollo.BaseMutationOptions<ShareMutation, ShareMutationVariables>;\nexport const UnfollowUserDocument = gql`\n    mutation UnfollowUser($id: String!) {\n  unfollowUser(id: $id) {\n    ...AnyUserResponse\n  }\n}\n    ${AnyUserResponseFragmentDoc}`;\nexport type UnfollowUserMutationFn = Apollo.MutationFunction<UnfollowUserMutation, UnfollowUserMutationVariables>;\n\n/**\n * __useUnfollowUserMutation__\n *\n * To run a mutation, you first call `useUnfollowUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUnfollowUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [unfollowUserMutation, { data, loading, error }] = useUnfollowUserMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUnfollowUserMutation(baseOptions?: Apollo.MutationHookOptions<UnfollowUserMutation, UnfollowUserMutationVariables>) {\n        return Apollo.useMutation<UnfollowUserMutation, UnfollowUserMutationVariables>(UnfollowUserDocument, baseOptions);\n      }\nexport type UnfollowUserMutationHookResult = ReturnType<typeof useUnfollowUserMutation>;\nexport type UnfollowUserMutationResult = Apollo.MutationResult<UnfollowUserMutation>;\nexport type UnfollowUserMutationOptions = Apollo.BaseMutationOptions<UnfollowUserMutation, UnfollowUserMutationVariables>;\nexport const UpdateAccountDocument = gql`\n    mutation UpdateAccount($private: Boolean!, $avatar: String!, $description: String!, $location: String!, $email: String!, $name: String!, $username: String!) {\n  updateAccount(\n    private: $private\n    avatar: $avatar\n    description: $description\n    location: $location\n    email: $email\n    name: $name\n    username: $username\n  ) {\n    ...AnyUserResponse\n  }\n}\n    ${AnyUserResponseFragmentDoc}`;\nexport type UpdateAccountMutationFn = Apollo.MutationFunction<UpdateAccountMutation, UpdateAccountMutationVariables>;\n\n/**\n * __useUpdateAccountMutation__\n *\n * To run a mutation, you first call `useUpdateAccountMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateAccountMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateAccountMutation, { data, loading, error }] = useUpdateAccountMutation({\n *   variables: {\n *      private: // value for 'private'\n *      avatar: // value for 'avatar'\n *      description: // value for 'description'\n *      location: // value for 'location'\n *      email: // value for 'email'\n *      name: // value for 'name'\n *      username: // value for 'username'\n *   },\n * });\n */\nexport function useUpdateAccountMutation(baseOptions?: Apollo.MutationHookOptions<UpdateAccountMutation, UpdateAccountMutationVariables>) {\n        return Apollo.useMutation<UpdateAccountMutation, UpdateAccountMutationVariables>(UpdateAccountDocument, baseOptions);\n      }\nexport type UpdateAccountMutationHookResult = ReturnType<typeof useUpdateAccountMutation>;\nexport type UpdateAccountMutationResult = Apollo.MutationResult<UpdateAccountMutation>;\nexport type UpdateAccountMutationOptions = Apollo.BaseMutationOptions<UpdateAccountMutation, UpdateAccountMutationVariables>;\nexport const UpdatePostDocument = gql`\n    mutation UpdatePost($id: String!, $content: String!) {\n  updatePost(id: $id, content: $content) {\n    ...AnyPostResponse\n  }\n}\n    ${AnyPostResponseFragmentDoc}`;\nexport type UpdatePostMutationFn = Apollo.MutationFunction<UpdatePostMutation, UpdatePostMutationVariables>;\n\n/**\n * __useUpdatePostMutation__\n *\n * To run a mutation, you first call `useUpdatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePostMutation, { data, loading, error }] = useUpdatePostMutation({\n *   variables: {\n *      id: // value for 'id'\n *      content: // value for 'content'\n *   },\n * });\n */\nexport function useUpdatePostMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePostMutation, UpdatePostMutationVariables>) {\n        return Apollo.useMutation<UpdatePostMutation, UpdatePostMutationVariables>(UpdatePostDocument, baseOptions);\n      }\nexport type UpdatePostMutationHookResult = ReturnType<typeof useUpdatePostMutation>;\nexport type UpdatePostMutationResult = Apollo.MutationResult<UpdatePostMutation>;\nexport type UpdatePostMutationOptions = Apollo.BaseMutationOptions<UpdatePostMutation, UpdatePostMutationVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    ...AnyUser\n  }\n}\n    ${AnyUserFragmentDoc}`;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const PostDocument = gql`\n    query Post($id: String!) {\n  post(id: $id) {\n    ...PostSnippet\n  }\n}\n    ${PostSnippetFragmentDoc}`;\n\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function usePostQuery(baseOptions: Apollo.QueryHookOptions<PostQuery, PostQueryVariables>) {\n        return Apollo.useQuery<PostQuery, PostQueryVariables>(PostDocument, baseOptions);\n      }\nexport function usePostLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostQuery, PostQueryVariables>) {\n          return Apollo.useLazyQuery<PostQuery, PostQueryVariables>(PostDocument, baseOptions);\n        }\nexport type PostQueryHookResult = ReturnType<typeof usePostQuery>;\nexport type PostLazyQueryHookResult = ReturnType<typeof usePostLazyQuery>;\nexport type PostQueryResult = Apollo.QueryResult<PostQuery, PostQueryVariables>;\nexport const PostsDocument = gql`\n    query Posts($limit: Int!, $cursor: String) {\n  posts(cursor: $cursor, limit: $limit) {\n    hasMore\n    posts {\n      ...PostSnippet\n    }\n  }\n}\n    ${PostSnippetFragmentDoc}`;\n\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\nexport function usePostsQuery(baseOptions: Apollo.QueryHookOptions<PostsQuery, PostsQueryVariables>) {\n        return Apollo.useQuery<PostsQuery, PostsQueryVariables>(PostsDocument, baseOptions);\n      }\nexport function usePostsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostsQuery, PostsQueryVariables>) {\n          return Apollo.useLazyQuery<PostsQuery, PostsQueryVariables>(PostsDocument, baseOptions);\n        }\nexport type PostsQueryHookResult = ReturnType<typeof usePostsQuery>;\nexport type PostsLazyQueryHookResult = ReturnType<typeof usePostsLazyQuery>;\nexport type PostsQueryResult = Apollo.QueryResult<PostsQuery, PostsQueryVariables>;\nexport const UserDocument = gql`\n    query User($username: String!) {\n  user(username: $username) {\n    errors {\n      field\n      message\n    }\n    user {\n      id\n      username\n      name\n      avatar\n      description\n      followers\n      following\n      verified\n      permissions\n      createdAt\n      updatedAt\n    }\n  }\n}\n    `;\n\n/**\n * __useUserQuery__\n *\n * To run a query within a React component, call `useUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserQuery({\n *   variables: {\n *      username: // value for 'username'\n *   },\n * });\n */\nexport function useUserQuery(baseOptions: Apollo.QueryHookOptions<UserQuery, UserQueryVariables>) {\n        return Apollo.useQuery<UserQuery, UserQueryVariables>(UserDocument, baseOptions);\n      }\nexport function useUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserQuery, UserQueryVariables>) {\n          return Apollo.useLazyQuery<UserQuery, UserQueryVariables>(UserDocument, baseOptions);\n        }\nexport type UserQueryHookResult = ReturnType<typeof useUserQuery>;\nexport type UserLazyQueryHookResult = ReturnType<typeof useUserLazyQuery>;\nexport type UserQueryResult = Apollo.QueryResult<UserQuery, UserQueryVariables>;"]},"metadata":{},"sourceType":"module"}