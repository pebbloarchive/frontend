{"ast":null,"code":"import _taggedTemplateLiteral from \"C:/Users/root/Desktop/dev/api2.pebblo.org/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\root\\\\Desktop\\\\dev\\\\api2.pebblo.org\\\\frontend\\\\src\\\\pages\\\\user.tsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n                query {\\n                    me {\\n                        id\\n                    }\\n                }\\n            \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { graphql, QueryRenderer } from \"react-relay\";\nimport environment from \"../utils/environment\";\nexport default function User() {\n  var _this = this;\n\n  return /*#__PURE__*/_jsxDEV(QueryRenderer, {\n    environment: environment,\n    query: graphql(_templateObject()),\n    variables: {},\n    render: function render(_ref) {\n      var error = _ref.error,\n          props = _ref.props;\n      if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Error!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 38\n      }, _this);\n      if (!props) return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 39\n      }, _this);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"ID: \", props.me.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 28\n      }, _this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n}\n_c = User;\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["C:/Users/root/Desktop/dev/api2.pebblo.org/frontend/src/pages/user.tsx"],"names":["graphql","QueryRenderer","environment","User","error","props","me","id"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,OAAT,EAAkBC,aAAlB,QAAuC,aAAvC;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC3B,sBACI,QAAC,aAAD;AACI,IAAA,WAAW,EAAED,WADjB;AAEI,IAAA,KAAK,EAAEF,OAAF,mBAFT;AASI,IAAA,SAAS,EAAE,EATf;AAUI,IAAA,MAAM,EAAE,sBAAoD;AAAA,UAAjDI,KAAiD,QAAjDA,KAAiD;AAAA,UAA1CC,KAA0C,QAA1CA,KAA0C;AACpD,UAAGD,KAAH,EAAU,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACV,UAAG,CAACC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACX,0BAAO;AAAA,2BAAUA,KAAK,CAACC,EAAN,CAASC,EAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACH;AAdT;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH;KApBuBJ,I","sourcesContent":["import { graphql, QueryRenderer } from \"react-relay\";\r\nimport environment from \"../utils/environment\";\r\n\r\nexport default function User() {\r\n    return (\r\n        <QueryRenderer \r\n            environment={environment}\r\n            query={graphql`\r\n                query {\r\n                    me {\r\n                        id\r\n                    }\r\n                }\r\n            `}\r\n            variables={{}}\r\n            render={({ error, props }: { error?: any, props?: any }) => {\r\n                    if(error) return <div>Error!</div>\r\n                    if(!props) return <div>Loading...</div>\r\n                    return <div>ID: {props.me.id}</div>\r\n                }\r\n            }\r\n        />\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}