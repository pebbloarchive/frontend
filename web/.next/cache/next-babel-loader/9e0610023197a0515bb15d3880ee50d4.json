{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\root\\\\Desktop\\\\dev\\\\api2.pebblo.org\\\\frontend\\\\src\\\\pages\\\\[username].tsx\";\nimport { getUser } from \"../../graphql/queries/user\";\nimport { getApolloClient, withApollo } from \"../components/hooks/withApolloHook\";\n\nconst username = ({\n  data\n}) => {\n  var _data, _data3;\n\n  data = data.data;\n  console.log(data);\n\n  if (data.loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 16\n    }, this);\n  }\n\n  if ((_data = data) === null || _data === void 0 ? void 0 : _data.error) {\n    var _data2;\n\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: (_data2 = data) === null || _data2 === void 0 ? void 0 : _data2.error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (!((_data3 = data) === null || _data3 === void 0 ? void 0 : _data3.user)) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \":(\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 16\n    }, this);\n  } // const router = useRouter();\n  // const { data, error, loading } = useQuery(getUser, {\n  //     variables: { username: 'test' }\n  // });\n  // if(loading) {\n  //     return <p>Loading...</p>\n  // }\n  // if(error) {\n  //     return <div>{error.message}</div>\n  // }\n  // if(!data?.user) {\n  //     <p>sad times man</p>\n  // }\n  // return (\n  //     <p>{JSON.stringify(data.user)}</p>\n  // )\n  // if(error) {\n  //     <p>{error.message}</p>\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"lel\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\nexport const getServerSideProps = async context => {\n  const client = getApolloClient();\n  const data = await client.query({\n    query: getUser,\n    variables: {\n      username: context.params.username\n    }\n  });\n  return {\n    props: {\n      apolloStaticCache: client.cache.extract(),\n      data\n    }\n  };\n};\nexport default withApollo(username);","map":{"version":3,"sources":["C:/Users/root/Desktop/dev/api2.pebblo.org/frontend/src/pages/[username].tsx"],"names":["getUser","getApolloClient","withApollo","username","data","console","log","loading","error","message","user","getServerSideProps","context","client","query","variables","params","props","apolloStaticCache","cache","extract"],"mappings":";;AACA,SAASA,OAAT,QAAwB,4BAAxB;AACA,SAASC,eAAT,EAA0BC,UAA1B,QAA4C,oCAA5C;;AAIA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AAE3BA,EAAAA,IAAI,GAAGA,IAAI,CAACA,IAAZ;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AAEA,MAAGA,IAAI,CAACG,OAAR,EAAiB;AACb,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,eAAGH,IAAH,0CAAG,MAAMI,KAAT,EAAgB;AAAA;;AACZ,wBAAO;AAAA,0BAAIJ,IAAJ,2CAAI,OAAMI,KAAN,CAAYC;AAAhB;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,MAAG,YAACL,IAAD,2CAAC,OAAMM,IAAP,CAAH,EAAgB;AACZ,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAhB0B,CAiB3B;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CA9CD;;AAgDA,OAAO,MAAMC,kBAAsC,GAAG,MAAOC,OAAP,IAAmB;AACrE,QAAMC,MAAM,GAAGZ,eAAe,EAA9B;AACA,QAAMG,IAAI,GAAG,MAAMS,MAAM,CAACC,KAAP,CAAa;AAC9BA,IAAAA,KAAK,EAAEd,OADuB;AAE9Be,IAAAA,SAAS,EAAE;AAAEZ,MAAAA,QAAQ,EAAES,OAAO,CAACI,MAAR,CAAeb;AAA3B;AAFmB,GAAb,CAAnB;AAIA,SAAO;AACLc,IAAAA,KAAK,EAAE;AACLC,MAAAA,iBAAiB,EAAEL,MAAM,CAACM,KAAP,CAAaC,OAAb,EADd;AAELhB,MAAAA;AAFK;AADF,GAAP;AAMH,CAZM;AAcP,eAAeF,UAAU,CAACC,QAAD,CAAzB","sourcesContent":["import { useQuery } from \"@apollo/client\"\r\nimport { getUser } from \"../../graphql/queries/user\";\r\nimport { getApolloClient, withApollo } from \"../components/hooks/withApolloHook\"\r\nimport { useRouter } from 'next/router';\r\nimport { GetServerSideProps } from \"next\";\r\n\r\nconst username = ({ data }) => {\r\n\r\n    data = data.data;\r\n\r\n    console.log(data)\r\n\r\n    if(data.loading) {\r\n        return <p>Loading...</p>\r\n    }\r\n   \r\n    if(data?.error) {\r\n        return <p>{data?.error.message}</p>\r\n    }\r\n\r\n    if(!data?.user) {\r\n        return <p>:(</p>\r\n    }\r\n    // const router = useRouter();\r\n    // const { data, error, loading } = useQuery(getUser, {\r\n    //     variables: { username: 'test' }\r\n    // });\r\n\r\n    // if(loading) {\r\n    //     return <p>Loading...</p>\r\n    // }\r\n\r\n    // if(error) {\r\n    //     return <div>{error.message}</div>\r\n    // }\r\n\r\n\r\n    // if(!data?.user) {\r\n    //     <p>sad times man</p>\r\n    // }\r\n\r\n    // return (\r\n    //     <p>{JSON.stringify(data.user)}</p>\r\n    // )\r\n\r\n    // if(error) {\r\n    //     <p>{error.message}</p>\r\n    // }\r\n\r\n    return (\r\n        <p>lel</p>\r\n    )\r\n}\r\n\r\nexport const getServerSideProps: GetServerSideProps = async (context) => {\r\n    const client = getApolloClient();\r\n    const data = await client.query({\r\n      query: getUser,\r\n      variables: { username: context.params.username as string }\r\n    });\r\n    return {\r\n      props: {\r\n        apolloStaticCache: client.cache.extract(),\r\n        data\r\n      }\r\n    };\r\n}\r\n\r\nexport default withApollo(username);\r\n"]},"metadata":{},"sourceType":"module"}