{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\root\\\\Desktop\\\\dev\\\\api2.pebblo.org\\\\frontend\\\\src\\\\pages\\\\[username].tsx\";\nimport { getUser } from \"../../graphql/queries/user\";\nimport { getApolloClient, withApollo } from \"../components/hooks/withApolloHook\";\n\nconst username = ({\n  loading,\n  error,\n  data\n}) => {\n  // const router = useRouter();\n  // const { data, error, loading } = useQuery(getUser, {\n  //     variables: { username: 'test' }\n  // });\n  // if(loading) {\n  //     return <p>Loading...</p>\n  // }\n  // if(error) {\n  //     return <div>{error.message}</div>\n  // }\n  // if(!data?.user) {\n  //     <p>sad times man</p>\n  // }\n  // return (\n  //     <p>{JSON.stringify(data.user)}</p>\n  // )\n  {\n    console.log(data);\n  }\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"lel\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\nexport const getServerSideProps = async context => {\n  const client = await getApolloClient();\n  const {\n    data,\n    error,\n    loading\n  } = await client.query({\n    query: getUser,\n    variables: {\n      username: context.params.username\n    }\n  });\n  return {\n    props: {\n      apolloStaticCache: client.cache.extract(),\n      data\n    }\n  };\n};\nexport default withApollo(username);","map":{"version":3,"sources":["C:/Users/root/Desktop/dev/api2.pebblo.org/frontend/src/pages/[username].tsx"],"names":["getUser","getApolloClient","withApollo","username","loading","error","data","console","log","getServerSideProps","context","client","query","variables","params","props","apolloStaticCache","cache","extract"],"mappings":";;AACA,SAASA,OAAT,QAAwB,4BAAxB;AACA,SAASC,eAAT,EAA0BC,UAA1B,QAA4C,oCAA5C;;AAIA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,KAAX;AAAkBC,EAAAA;AAAlB,CAAD,KAA8B;AAC3C;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAACC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAAkB;AAEnB,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CA5BD;;AA8BA,OAAO,MAAMG,kBAAsC,GAAG,MAAOC,OAAP,IAAmB;AACrE,QAAMC,MAAM,GAAG,MAAMV,eAAe,EAApC;AACA,QAAM;AAAEK,IAAAA,IAAF;AAAQD,IAAAA,KAAR;AAAeD,IAAAA;AAAf,MAA2B,MAAMO,MAAM,CAACC,KAAP,CAAa;AAClDA,IAAAA,KAAK,EAAEZ,OAD2C;AAElDa,IAAAA,SAAS,EAAE;AAAEV,MAAAA,QAAQ,EAAEO,OAAO,CAACI,MAAR,CAAeX;AAA3B;AAFuC,GAAb,CAAvC;AAIA,SAAO;AACLY,IAAAA,KAAK,EAAE;AACLC,MAAAA,iBAAiB,EAAEL,MAAM,CAACM,KAAP,CAAaC,OAAb,EADd;AAELZ,MAAAA;AAFK;AADF,GAAP;AAMH,CAZM;AAcP,eAAeJ,UAAU,CAACC,QAAD,CAAzB","sourcesContent":["import { useQuery } from \"@apollo/client\"\r\nimport { getUser } from \"../../graphql/queries/user\";\r\nimport { getApolloClient, withApollo } from \"../components/hooks/withApolloHook\"\r\nimport { useRouter } from 'next/router';\r\nimport { GetServerSideProps } from \"next\";\r\n\r\nconst username = ({ loading, error, data }) => {\r\n    // const router = useRouter();\r\n    // const { data, error, loading } = useQuery(getUser, {\r\n    //     variables: { username: 'test' }\r\n    // });\r\n\r\n    // if(loading) {\r\n    //     return <p>Loading...</p>\r\n    // }\r\n\r\n    // if(error) {\r\n    //     return <div>{error.message}</div>\r\n    // }\r\n\r\n\r\n    // if(!data?.user) {\r\n    //     <p>sad times man</p>\r\n    // }\r\n\r\n    // return (\r\n    //     <p>{JSON.stringify(data.user)}</p>\r\n    // )\r\n\r\n    {console.log(data)}\r\n\r\n    return (\r\n        <p>lel</p>\r\n    )\r\n}\r\n\r\nexport const getServerSideProps: GetServerSideProps = async (context) => {\r\n    const client = await getApolloClient();\r\n    const { data, error, loading } = await client.query({\r\n      query: getUser,\r\n      variables: { username: context.params.username as string }\r\n    });\r\n    return {\r\n      props: {\r\n        apolloStaticCache: client.cache.extract(),\r\n        data\r\n      }\r\n    };\r\n}\r\n\r\nexport default withApollo(username);\r\n"]},"metadata":{},"sourceType":"module"}