{"ast":null,"code":"import _taggedTemplateLiteral from \"C:/Users/root/Desktop/dev/frontend/web/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject21() {\n  var data = _taggedTemplateLiteral([\"\\n    query User($username: String!) {\\n  user(username: $username) {\\n    errors {\\n      field\\n      message\\n    }\\n    user {\\n      id\\n      username\\n      name\\n      avatar\\n      description\\n      followers\\n      following\\n      verified\\n      permissions\\n      createdAt\\n      updatedAt\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject21 = function _templateObject21() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject20() {\n  var data = _taggedTemplateLiteral([\"\\n    query Posts($limit: Int!, $cursor: String) {\\n  posts(cursor: $cursor, limit: $limit) {\\n    hasMore\\n    posts {\\n      ...PostSnippet\\n    }\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject20 = function _templateObject20() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject19() {\n  var data = _taggedTemplateLiteral([\"\\n    query Post($id: String!) {\\n  post(id: $id) {\\n    ...PostSnippet\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject19 = function _templateObject19() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject18() {\n  var data = _taggedTemplateLiteral([\"\\n    query Me {\\n  me {\\n    ...AnyUser\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject18 = function _templateObject18() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject17() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation UpdatePost($id: String!, $content: String!) {\\n  updatePost(id: $id, content: $content) {\\n    ...AnyPostResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject17 = function _templateObject17() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject16() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation UpdateAccount($private: Boolean!, $avatar: String!, $description: String!, $location: String!, $email: String!, $name: String!, $username: String!) {\\n  updateAccount(\\n    private: $private\\n    avatar: $avatar\\n    description: $description\\n    location: $location\\n    email: $email\\n    name: $name\\n    username: $username\\n  ) {\\n    ...AnyUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject16 = function _templateObject16() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject15() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation UnfollowUser($id: String!) {\\n  unfollowUser(id: $id) {\\n    ...AnyUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject15 = function _templateObject15() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject14() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Share($id: String!) {\\n  share(id: $id)\\n}\\n    \"]);\n\n  _templateObject14 = function _templateObject14() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject13() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Register($options: UsernamePasswordInput!) {\\n  register(options: $options) {\\n    ...AnyUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject13 = function _templateObject13() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject12() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Logout {\\n  logout\\n}\\n    \"]);\n\n  _templateObject12 = function _templateObject12() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject11() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Login($usernameOrEmail: String!, $password: String!) {\\n  login(usernameOrEmail: $usernameOrEmail, password: $password) {\\n    ...AnyUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject11 = function _templateObject11() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Like($id: String!) {\\n  like(id: $id)\\n}\\n    \"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Follow($id: String!) {\\n  followUser(id: $id) {\\n    ...AnyUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation DeletePost($id: String!) {\\n  deletePost(id: $id)\\n}\\n    \"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CreatePost($content: String!) {\\n  createPost(content: $content) {\\n    ...AnyPostResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CommentPost($id: String!, $content: String!) {\\n  commentPost(id: $id, content: $content) {\\n    post {\\n      id\\n      author\\n      content\\n      created_at\\n      updated_at\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation DeleteSub($id: String!, $subid: String!) {\\n  deleteSub(id: $id, subid: $subid) {\\n    errors {\\n      field\\n      message\\n    }\\n    post {\\n      id\\n      author\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment AnyUserResponse on UserResponse {\\n  errors {\\n    field\\n    message\\n  }\\n  user {\\n    ...AnyUser\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment AnyUser on User {\\n  id\\n  username\\n  name\\n  email\\n  avatar\\n  description\\n  followers\\n  following\\n  verified\\n  permissions\\n  createdAt\\n  updatedAt\\n}\\n    \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment AnyPostResponse on PostResponse {\\n  errors {\\n    field\\n    message\\n  }\\n  post {\\n    ...PostSnippet\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment PostSnippet on Post {\\n  id\\n  author\\n  content\\n  likes\\n  shares\\n  media\\n  subs {\\n    id\\n    createdAt\\n    owner {\\n      id\\n      username\\n      avatar\\n      verified\\n    }\\n  }\\n  creator {\\n    id\\n    username\\n    name\\n    verified\\n    avatar\\n  }\\n  created_at\\n  updated_at\\n}\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport var PostSnippetFragmentDoc = gql(_templateObject());\nexport var AnyPostResponseFragmentDoc = gql(_templateObject2(), PostSnippetFragmentDoc);\nexport var AnyUserFragmentDoc = gql(_templateObject3());\nexport var AnyUserResponseFragmentDoc = gql(_templateObject4(), AnyUserFragmentDoc);\nexport var DeleteSubDocument = gql(_templateObject5());\n\n/**\n * __useDeleteSubMutation__\n *\n * To run a mutation, you first call `useDeleteSubMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteSubMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteSubMutation, { data, loading, error }] = useDeleteSubMutation({\n *   variables: {\n *      id: // value for 'id'\n *      subid: // value for 'subid'\n *   },\n * });\n */\nexport function useDeleteSubMutation(baseOptions) {\n  return Apollo.useMutation(DeleteSubDocument, baseOptions);\n}\nexport var CommentPostDocument = gql(_templateObject6());\n\n/**\n * __useCommentPostMutation__\n *\n * To run a mutation, you first call `useCommentPostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCommentPostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [commentPostMutation, { data, loading, error }] = useCommentPostMutation({\n *   variables: {\n *      id: // value for 'id'\n *      content: // value for 'content'\n *   },\n * });\n */\nexport function useCommentPostMutation(baseOptions) {\n  return Apollo.useMutation(CommentPostDocument, baseOptions);\n}\nexport var CreatePostDocument = gql(_templateObject7(), AnyPostResponseFragmentDoc);\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      content: // value for 'content'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions) {\n  return Apollo.useMutation(CreatePostDocument, baseOptions);\n}\nexport var DeletePostDocument = gql(_templateObject8());\n\n/**\n * __useDeletePostMutation__\n *\n * To run a mutation, you first call `useDeletePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePostMutation, { data, loading, error }] = useDeletePostMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeletePostMutation(baseOptions) {\n  return Apollo.useMutation(DeletePostDocument, baseOptions);\n}\nexport var FollowDocument = gql(_templateObject9(), AnyUserResponseFragmentDoc);\n\n/**\n * __useFollowMutation__\n *\n * To run a mutation, you first call `useFollowMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useFollowMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [followMutation, { data, loading, error }] = useFollowMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFollowMutation(baseOptions) {\n  return Apollo.useMutation(FollowDocument, baseOptions);\n}\nexport var LikeDocument = gql(_templateObject10());\n\n/**\n * __useLikeMutation__\n *\n * To run a mutation, you first call `useLikeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLikeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [likeMutation, { data, loading, error }] = useLikeMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useLikeMutation(baseOptions) {\n  return Apollo.useMutation(LikeDocument, baseOptions);\n}\nexport var LoginDocument = gql(_templateObject11(), AnyUserResponseFragmentDoc);\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      usernameOrEmail: // value for 'usernameOrEmail'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  return Apollo.useMutation(LoginDocument, baseOptions);\n}\nexport var LogoutDocument = gql(_templateObject12());\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions) {\n  return Apollo.useMutation(LogoutDocument, baseOptions);\n}\nexport var RegisterDocument = gql(_templateObject13(), AnyUserResponseFragmentDoc);\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions) {\n  return Apollo.useMutation(RegisterDocument, baseOptions);\n}\nexport var ShareDocument = gql(_templateObject14());\n\n/**\n * __useShareMutation__\n *\n * To run a mutation, you first call `useShareMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useShareMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [shareMutation, { data, loading, error }] = useShareMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useShareMutation(baseOptions) {\n  return Apollo.useMutation(ShareDocument, baseOptions);\n}\nexport var UnfollowUserDocument = gql(_templateObject15(), AnyUserResponseFragmentDoc);\n\n/**\n * __useUnfollowUserMutation__\n *\n * To run a mutation, you first call `useUnfollowUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUnfollowUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [unfollowUserMutation, { data, loading, error }] = useUnfollowUserMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUnfollowUserMutation(baseOptions) {\n  return Apollo.useMutation(UnfollowUserDocument, baseOptions);\n}\nexport var UpdateAccountDocument = gql(_templateObject16(), AnyUserResponseFragmentDoc);\n\n/**\n * __useUpdateAccountMutation__\n *\n * To run a mutation, you first call `useUpdateAccountMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateAccountMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateAccountMutation, { data, loading, error }] = useUpdateAccountMutation({\n *   variables: {\n *      private: // value for 'private'\n *      avatar: // value for 'avatar'\n *      description: // value for 'description'\n *      location: // value for 'location'\n *      email: // value for 'email'\n *      name: // value for 'name'\n *      username: // value for 'username'\n *   },\n * });\n */\nexport function useUpdateAccountMutation(baseOptions) {\n  return Apollo.useMutation(UpdateAccountDocument, baseOptions);\n}\nexport var UpdatePostDocument = gql(_templateObject17(), AnyPostResponseFragmentDoc);\n\n/**\n * __useUpdatePostMutation__\n *\n * To run a mutation, you first call `useUpdatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePostMutation, { data, loading, error }] = useUpdatePostMutation({\n *   variables: {\n *      id: // value for 'id'\n *      content: // value for 'content'\n *   },\n * });\n */\nexport function useUpdatePostMutation(baseOptions) {\n  return Apollo.useMutation(UpdatePostDocument, baseOptions);\n}\nexport var MeDocument = gql(_templateObject18(), AnyUserFragmentDoc);\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  return Apollo.useQuery(MeDocument, baseOptions);\n}\nexport function useMeLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(MeDocument, baseOptions);\n}\nexport var PostDocument = gql(_templateObject19(), PostSnippetFragmentDoc);\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function usePostQuery(baseOptions) {\n  return Apollo.useQuery(PostDocument, baseOptions);\n}\nexport function usePostLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(PostDocument, baseOptions);\n}\nexport var PostsDocument = gql(_templateObject20(), PostSnippetFragmentDoc);\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\n\nexport function usePostsQuery(baseOptions) {\n  return Apollo.useQuery(PostsDocument, baseOptions);\n}\nexport function usePostsLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(PostsDocument, baseOptions);\n}\nexport var UserDocument = gql(_templateObject21());\n/**\n * __useUserQuery__\n *\n * To run a query within a React component, call `useUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserQuery({\n *   variables: {\n *      username: // value for 'username'\n *   },\n * });\n */\n\nexport function useUserQuery(baseOptions) {\n  return Apollo.useQuery(UserDocument, baseOptions);\n}\nexport function useUserLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(UserDocument, baseOptions);\n}","map":null,"metadata":{},"sourceType":"module"}