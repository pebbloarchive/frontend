{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\root\\\\Desktop\\\\dev\\\\api2.pebblo.org\\\\frontend\\\\src\\\\pages\\\\[username].tsx\",\n    _this = this;\n\nimport { withApollo } from \"../components/hooks/withApolloHook\";\n\nvar username = function username(_ref) {\n  var data = _ref.data;\n\n  if (!data || !(data === null || data === void 0 ? void 0 : data.data.user)) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \":(\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 16\n    }, _this);\n  }\n\n  if (data.data.loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 16\n    }, _this);\n  }\n\n  if (data === null || data === void 0 ? void 0 : data.data.error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data === null || data === void 0 ? void 0 : data.error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 16\n    }, _this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"lel\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, _this);\n};\n\nexport var __N_SSP = true;\nexport default withApollo(username);","map":{"version":3,"sources":["C:/Users/root/Desktop/dev/api2.pebblo.org/frontend/src/pages/[username].tsx"],"names":["withApollo","username","data","user","loading","error","message"],"mappings":";;;;;AAEA,SAA0BA,UAA1B,QAA4C,oCAA5C;;AAIA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAC3B,MAAG,CAACA,IAAD,IAAS,EAACA,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEA,IAAN,CAAWC,IAAZ,CAAZ,EAA8B;AAC1B,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACH;;AAED,MAAGD,IAAI,CAACA,IAAL,CAAUE,OAAb,EAAsB;AAClB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACH;;AAED,MAAGF,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEA,IAAN,CAAWG,KAAd,EAAqB;AACjB,wBAAO;AAAA,gBAAIH,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAEG,KAAN,CAAYC;AAAhB;AAAA;AAAA;AAAA;AAAA,aAAP;AACH;;AAGD,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ;AAGH,CAjBD;;;AAoCA,eAAeN,UAAU,CAACC,QAAD,CAAzB","sourcesContent":["import { useQuery } from \"@apollo/client\"\r\nimport { getUser } from \"../../graphql/queries/user\";\r\nimport { getApolloClient, withApollo } from \"../components/hooks/withApolloHook\"\r\nimport { useRouter } from 'next/router';\r\nimport { GetServerSideProps } from \"next\";\r\n\r\nconst username = ({ data }) => {\r\n    if(!data || !data?.data.user) {\r\n        return <p>:(</p>\r\n    }\r\n    \r\n    if(data.data.loading) {\r\n        return <p>Loading...</p>\r\n    }\r\n    \r\n    if(data?.data.error) {\r\n        return <p>{data?.error.message}</p>\r\n    }\r\n    \r\n\r\n    return (\r\n        <p>lel</p>\r\n    )\r\n}\r\n\r\nexport const getServerSideProps: GetServerSideProps = async (context) => {\r\n    const client = getApolloClient();\r\n    const data = await client.query({\r\n      query: getUser,\r\n      variables: { username: context.params.username as string }\r\n    });\r\n    if(data?.data.error || data?.data.errors) {\r\n        return <p>OK</p>\r\n    }\r\n    return {\r\n      props: {\r\n        apolloStaticCache: client.cache.extract(),\r\n        data\r\n      }\r\n    };\r\n}\r\n\r\nexport default withApollo(username);\r\n"]},"metadata":{},"sourceType":"module"}