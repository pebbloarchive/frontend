{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import { ApolloClient, HttpLink, InMemoryCache, NormalizedCacheObject } from \"@apollo/client\";\n// import { NextPageContext } from \"next\";\n// import * as React from 'react'\n// import { ApolloProvider } from '@apollo/client'\n// import { ThemeProvider } from \"next-themes\";\n// // const CLIENT_URL = process.env.NODE_ENV !== 'production' ? 'https://pebblo.org/api' : 'http://localhost:4000/api';\n// const CLIENT_URL = 'http://localhost:4000/api';\n// const endpoint = `${CLIENT_URL}/query`;\n// const link = new HttpLink({ uri: endpoint, credentials: \"include\" });\n// const isBrowser: boolean = (process as any).browser;\nimport { createWithApollo } from \"./createWithApollo\";\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\nconst CLIENT_URL = 'http://localhost:4000/api';\nconst endpoint = `${CLIENT_URL}/graphql`;\n\nconst createClient = ctx => {\n  var _ctx$req;\n\n  return new ApolloClient({\n    uri: endpoint,\n    credentials: \"include\",\n    headers: {\n      cookie: (true ? ctx === null || ctx === void 0 ? void 0 : (_ctx$req = ctx.req) === null || _ctx$req === void 0 ? void 0 : _ctx$req.headers.cookie : undefined) || \"\"\n    },\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            posts: {\n              keyArgs: [],\n\n              merge(existing, incoming) {\n                return _objectSpread(_objectSpread({}, incoming), {}, {\n                  posts: [...((existing === null || existing === void 0 ? void 0 : existing.posts) || []), ...incoming.posts]\n                });\n              }\n\n            }\n          }\n        }\n      }\n    })\n  });\n};\n\nexport const withApollo = createWithApollo(createClient);","map":null,"metadata":{},"sourceType":"module"}