{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\root\\\\Desktop\\\\dev\\\\api2.pebblo.org\\\\frontend\\\\src\\\\pages\\\\[username].tsx\";\nimport { getUser } from \"../../graphql/queries/user\";\nimport { getApolloClient, withApollo } from \"../components/hooks/withApolloHook\";\n\nconst username = ({\n  loading,\n  error,\n  data\n}) => {\n  // const router = useRouter();\n  // const { data, error, loading } = useQuery(getUser, {\n  //     variables: { username: 'test' }\n  // });\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (!(data === null || data === void 0 ? void 0 : data.user)) {\n    /*#__PURE__*/\n    _jsxDEV(\"p\", {\n      children: \"sad times man\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: JSON.stringify(data.user)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n\nexport const getServerSideProps = async ({\n  context\n}) => {\n  const client = await getApolloClient();\n  const user = await client.query({\n    query: getUser,\n    variables: {\n      username: context.params.username\n    }\n  });\n  return {\n    props: {\n      apolloStaticCache: client.cache.extract(),\n      user\n    }\n  };\n};\nexport default withApollo(username);","map":{"version":3,"sources":["C:/Users/root/Desktop/dev/api2.pebblo.org/frontend/src/pages/[username].tsx"],"names":["getUser","getApolloClient","withApollo","username","loading","error","data","message","user","JSON","stringify","getServerSideProps","context","client","query","variables","params","props","apolloStaticCache","cache","extract"],"mappings":";;AACA,SAASA,OAAT,QAAwB,4BAAxB;AACA,SAASC,eAAT,EAA0BC,UAA1B,QAA4C,oCAA5C;;AAGA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,KAAX;AAAkBC,EAAAA;AAAlB,CAAD,KAA8B;AAC3C;AACA;AACA;AACA;AAEA,MAAGF,OAAH,EAAY;AACR,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,MAAGC,KAAH,EAAU;AACN,wBAAO;AAAA,gBAAMA,KAAK,CAACE;AAAZ;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAGD,MAAG,EAACD,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEE,IAAP,CAAH,EAAgB;AACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACH;;AAED,sBACI;AAAA,cAAIC,IAAI,CAACC,SAAL,CAAeJ,IAAI,CAACE,IAApB;AAAJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAtBD;;AAwBA,OAAO,MAAMG,kBAAkB,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAuB;AACrD,QAAMC,MAAM,GAAG,MAAMZ,eAAe,EAApC;AACA,QAAMO,IAAI,GAAG,MAAMK,MAAM,CAACC,KAAP,CAAa;AAC9BA,IAAAA,KAAK,EAAEd,OADuB;AAE9Be,IAAAA,SAAS,EAAE;AAAEZ,MAAAA,QAAQ,EAAES,OAAO,CAACI,MAAR,CAAeb;AAA3B;AAFmB,GAAb,CAAnB;AAIA,SAAO;AACLc,IAAAA,KAAK,EAAE;AACLC,MAAAA,iBAAiB,EAAEL,MAAM,CAACM,KAAP,CAAaC,OAAb,EADd;AAELZ,MAAAA;AAFK;AADF,GAAP;AAMH,CAZM;AAcP,eAAeN,UAAU,CAACC,QAAD,CAAzB","sourcesContent":["import { useQuery } from \"@apollo/client\"\r\nimport { getUser } from \"../../graphql/queries/user\";\r\nimport { getApolloClient, withApollo } from \"../components/hooks/withApolloHook\"\r\nimport { useRouter } from 'next/router';\r\n\r\nconst username = ({ loading, error, data }) => {\r\n    // const router = useRouter();\r\n    // const { data, error, loading } = useQuery(getUser, {\r\n    //     variables: { username: 'test' }\r\n    // });\r\n\r\n    if(loading) {\r\n        return <p>Loading...</p>\r\n    }\r\n\r\n    if(error) {\r\n        return <div>{error.message}</div>\r\n    }\r\n\r\n\r\n    if(!data?.user) {\r\n        <p>sad times man</p>\r\n    }\r\n\r\n    return (\r\n        <p>{JSON.stringify(data.user)}</p>\r\n    )\r\n}\r\n\r\nexport const getServerSideProps = async ({ context }) => {\r\n    const client = await getApolloClient();\r\n    const user = await client.query({\r\n      query: getUser,\r\n      variables: { username: context.params.username as string }\r\n    });\r\n    return {\r\n      props: {\r\n        apolloStaticCache: client.cache.extract(),\r\n        user\r\n      }\r\n    };\r\n}\r\n\r\nexport default withApollo(username);\r\n"]},"metadata":{},"sourceType":"module"}