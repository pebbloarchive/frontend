{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\root\\\\Desktop\\\\dev\\\\api2.pebblo.org\\\\frontend\\\\src\\\\pages\\\\[username].tsx\";\nimport { getUser } from \"../../graphql/queries/user\";\nimport { getApolloClient, withApollo } from \"../components/hooks/withApolloHook\";\n\nconst username = ({\n  user\n}) => {\n  // const router = useRouter();\n  // const { data, error, loading } = useQuery(getUser, {\n  //     variables: { username: 'test' }\n  // });\n  // if(loading) {\n  //     return <p>Loading...</p>\n  // }\n  // if(error) {\n  //     return <div>{error.message}</div>\n  // }\n  // if(!data?.user) {\n  //     <p>sad times man</p>\n  // }\n  // return (\n  //     <p>{JSON.stringify(data.user)}</p>\n  // )\n  {\n    console.log(user.data);\n  }\n\n  if (user.data.error) {\n    console.log('lel');\n  }\n\n  if (!user.data || !user.data.username) {\n    /*#__PURE__*/\n    _jsxDEV(\"p\", {\n      children: \"sad times man\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: JSON.stringify(user)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\nexport const getServerSideProps = async context => {\n  const client = await getApolloClient();\n  const user = await client.query({\n    query: getUser,\n    variables: {\n      username: context.params.username\n    }\n  });\n  return {\n    props: {\n      apolloStaticCache: client.cache.extract(),\n      user\n    }\n  };\n};\nexport default withApollo(username);","map":{"version":3,"sources":["C:/Users/root/Desktop/dev/api2.pebblo.org/frontend/src/pages/[username].tsx"],"names":["getUser","getApolloClient","withApollo","username","user","console","log","data","error","JSON","stringify","getServerSideProps","context","client","query","variables","params","props","apolloStaticCache","cache","extract"],"mappings":";;AACA,SAASA,OAAT,QAAwB,4BAAxB;AACA,SAASC,eAAT,EAA0BC,UAA1B,QAA4C,oCAA5C;;AAIA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC3B;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAACC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,IAAjB;AAAuB;;AAExB,MAAGH,IAAI,CAACG,IAAL,CAAUC,KAAb,EAAoB;AAChBH,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACH;;AAED,MAAG,CAACF,IAAI,CAACG,IAAN,IAAc,CAACH,IAAI,CAACG,IAAL,CAAUJ,QAA5B,EAAsC;AAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACH;;AAED,sBACI;AAAA,cAAIM,IAAI,CAACC,SAAL,CAAeN,IAAf;AAAJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CApCD;;AAsCA,OAAO,MAAMO,kBAAsC,GAAG,MAAOC,OAAP,IAAmB;AACrE,QAAMC,MAAM,GAAG,MAAMZ,eAAe,EAApC;AACA,QAAMG,IAAI,GAAG,MAAMS,MAAM,CAACC,KAAP,CAAa;AAC9BA,IAAAA,KAAK,EAAEd,OADuB;AAE9Be,IAAAA,SAAS,EAAE;AAAEZ,MAAAA,QAAQ,EAAES,OAAO,CAACI,MAAR,CAAeb;AAA3B;AAFmB,GAAb,CAAnB;AAIA,SAAO;AACLc,IAAAA,KAAK,EAAE;AACLC,MAAAA,iBAAiB,EAAEL,MAAM,CAACM,KAAP,CAAaC,OAAb,EADd;AAELhB,MAAAA;AAFK;AADF,GAAP;AAMH,CAZM;AAcP,eAAeF,UAAU,CAACC,QAAD,CAAzB","sourcesContent":["import { useQuery } from \"@apollo/client\"\r\nimport { getUser } from \"../../graphql/queries/user\";\r\nimport { getApolloClient, withApollo } from \"../components/hooks/withApolloHook\"\r\nimport { useRouter } from 'next/router';\r\nimport { GetServerSideProps } from \"next\";\r\n\r\nconst username = ({ user }) => {\r\n    // const router = useRouter();\r\n    // const { data, error, loading } = useQuery(getUser, {\r\n    //     variables: { username: 'test' }\r\n    // });\r\n\r\n    // if(loading) {\r\n    //     return <p>Loading...</p>\r\n    // }\r\n\r\n    // if(error) {\r\n    //     return <div>{error.message}</div>\r\n    // }\r\n\r\n\r\n    // if(!data?.user) {\r\n    //     <p>sad times man</p>\r\n    // }\r\n\r\n    // return (\r\n    //     <p>{JSON.stringify(data.user)}</p>\r\n    // )\r\n\r\n    {console.log(user.data)}\r\n\r\n    if(user.data.error) {\r\n        console.log('lel')\r\n    }\r\n\r\n    if(!user.data || !user.data.username) {\r\n        <p>sad times man</p>\r\n    }\r\n\r\n    return (\r\n        <p>{JSON.stringify(user)}</p>\r\n    )\r\n}\r\n\r\nexport const getServerSideProps: GetServerSideProps = async (context) => {\r\n    const client = await getApolloClient();\r\n    const user = await client.query({\r\n      query: getUser,\r\n      variables: { username: context.params.username as string }\r\n    });\r\n    return {\r\n      props: {\r\n        apolloStaticCache: client.cache.extract(),\r\n        user\r\n      }\r\n    };\r\n}\r\n\r\nexport default withApollo(username);\r\n"]},"metadata":{},"sourceType":"module"}