{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\root\\\\Desktop\\\\dev\\\\api2.pebblo.org\\\\frontend\\\\src\\\\pages\\\\[username].tsx\",\n    _this = this;\n\nimport { withApollo } from \"../components/hooks/withApolloHook\";\n\nvar username = function username(_ref) {\n  var data = _ref.data;\n  if (data.loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 29\n  }, _this);\n  if (!data) /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"lol\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 15\n  }, _this); // const router = useRouter();\n  // const { data, error, loading } = useQuery(getUser, {\n  //     variables: { username: 'test' }\n  // });\n  // if(loading) {\n  //     return <p>Loading...</p>\n  // }\n  // if(error) {\n  //     return <div>{error.message}</div>\n  // }\n  // if(!data?.user) {\n  //     <p>sad times man</p>\n  // }\n  // return (\n  //     <p>{JSON.stringify(data.user)}</p>\n  // )\n  // if(error) {\n  //     <p>{error.message}</p>\n  // }\n\n  {\n    console.log(data);\n  }\n\n  if (data.error) {\n    /*#__PURE__*/\n    _jsxDEV(\"p\", {\n      children: data.error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, _this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"lel\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, _this);\n};\n\nexport var __N_SSP = true;\nexport default withApollo(username);","map":{"version":3,"sources":["C:/Users/root/Desktop/dev/api2.pebblo.org/frontend/src/pages/[username].tsx"],"names":["withApollo","username","data","loading","console","log","error","message"],"mappings":";;;;;AAEA,SAA0BA,UAA1B,QAA4C,oCAA5C;;AAIA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAC3B,MAAGA,IAAI,CAACC,OAAR,EAAiB,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACjB,MAAG,CAACD,IAAJ,EAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFiB,CAG3B;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AAACE,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAAkB;;AAEnB,MAAGA,IAAI,CAACI,KAAR,EAAe;AACX;AAAA;AAAA,gBAAIJ,IAAI,CAACI,KAAL,CAAWC;AAAf;AAAA;AAAA;AAAA;AAAA;AACH;;AAED,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ;AAGH,CAtCD;;;AAsDA,eAAeP,UAAU,CAACC,QAAD,CAAzB","sourcesContent":["import { useQuery } from \"@apollo/client\"\r\nimport { getUser } from \"../../graphql/queries/user\";\r\nimport { getApolloClient, withApollo } from \"../components/hooks/withApolloHook\"\r\nimport { useRouter } from 'next/router';\r\nimport { GetServerSideProps } from \"next\";\r\n\r\nconst username = ({ data }) => {\r\n    if(data.loading) return <p>Loading...</p>\r\n    if(!data) <p>lol</p>\r\n    // const router = useRouter();\r\n    // const { data, error, loading } = useQuery(getUser, {\r\n    //     variables: { username: 'test' }\r\n    // });\r\n\r\n    // if(loading) {\r\n    //     return <p>Loading...</p>\r\n    // }\r\n\r\n    // if(error) {\r\n    //     return <div>{error.message}</div>\r\n    // }\r\n\r\n\r\n    // if(!data?.user) {\r\n    //     <p>sad times man</p>\r\n    // }\r\n\r\n    // return (\r\n    //     <p>{JSON.stringify(data.user)}</p>\r\n    // )\r\n\r\n    // if(error) {\r\n    //     <p>{error.message}</p>\r\n    // }\r\n\r\n    {console.log(data)}\r\n\r\n    if(data.error) {\r\n        <p>{data.error.message}</p>\r\n    }\r\n\r\n    return (\r\n        <p>lel</p>\r\n    )\r\n}\r\n\r\nexport const getServerSideProps: GetServerSideProps = async (context) => {\r\n    const client = await getApolloClient();\r\n    const data = await client.query({\r\n      query: getUser,\r\n      variables: { username: context.params.username as string }\r\n    });\r\n    return {\r\n      props: {\r\n        apolloStaticCache: client.cache.extract(),\r\n        data\r\n      }\r\n    };\r\n}\r\n\r\nexport default withApollo(username);\r\n"]},"metadata":{},"sourceType":"module"}